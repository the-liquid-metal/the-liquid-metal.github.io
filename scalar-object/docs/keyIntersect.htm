<h1>keyIntersect</h1>

 <div>
  <p>
   <span><strong>keyIntersect()</strong></span> returns an array
   containing all the entries of <code>array1</code>
   which have keys that are present in all the arguments.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
  <p>
   <dl>
     <dt><code>array1</code></dt>
     <dd><p>The array with master keys to check.</p></dd>

     <dt><code>array2</code></dt>
     <dd><p>An array to compare keys against.</p></dd>

     <dt><code>...</code></dt>
     <dd><p>A variable list of arrays to compare.</p></dd>
   </dl>
  </p>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns an associative array containing all the entries of 
   <code>array1</code> which have keys that are present in all
   arguments.
  </p>      
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 <span><strong>keyIntersect()</strong></span> example</strong></p>
    <div>
     <pre><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'blue'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'red'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'green'&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'purple'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'green'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">5</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'blue'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">6</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'yellow'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">7</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'cyan'&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">8</span><span style="color: #007700">);<br /><br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">keyIntersect</span><span style="color: #007700">(</span><span style="color: #0000BB">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$array2</span><span style="color: #007700">));<br /></span><span style="color: #0000BB">?&gt;</span></span></pre>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
array(2) {
  [&quot;blue&quot;]=&gt;
  int(1)
  [&quot;green&quot;]=&gt;
  int(3)
}
</pre></div>
    </div>
   </div>
  </p>
  <p>
   In our example you see that only the keys <em>&#039;blue&#039;</em>
   and <em>&#039;green&#039;</em> are present in both arrays and thus
   returned. Also notice that the values for the keys
   <em>&#039;blue&#039;</em> and <em>&#039;green&#039;</em> differ between
   the two arrays. A match still occurs because only the keys are checked.
   The values returned are those of <code>array1</code>.
  </p>
  <p>
   The two keys from the <em>key =&gt; value</em> pairs are
   considered equal only if
   <em>(string) $key1 === (string) $key2 </em>. In other words
   a strict type check is executed so the string representation must be
   the same.
  </p>
 </div>
