<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>keyIntersect</h1>

  <div class="short-description">
    <code>keyIntersect( array <var>$array2</var>, array <var>...</var> ): array</code>
    <p>
      Context: array.<br/>
      Alias of <a href="http://php.net/manual/en/function.array-intersect-key.php">array_intersect_key</a>.<br/>
      Computes the intersection using keys for comparison.
    </p>
  </div>

  <div>
    <strong>keyIntersect()</strong> returns an array
    containing all the entries of <var>$scalarObject->val</var>
    which have keys that are present in all the arguments.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$array2</dt>
      <dd>An array to compare keys against.</dd>

      <dt>...</dt>
      <dd>A variable list of arrays to compare.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns an associative array containing all the entries of <var>$scalarObject->val</var>
      which have keys that are present in all arguments.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 keyIntersect() example</strong></p>
    <pre class="php-code">
      <?php
      $array1 = array('blue'  => 1, 'red'  => 2, 'green'  => 3, 'purple' => 4);
      $array2 = array('green' => 5, 'blue' => 6, 'yellow' => 7, 'cyan'   => 8);

      var_dump(keyIntersect($array1, $array2));
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      array(2) {
        ["blue"]=>
        int(1)
        ["green"]=>
        int(3)
      }
    </pre>

    <p>
      In our example you see that only the keys <em>'blue'</em> and <em>'green'</em>
      are present in both arrays and thus returned. Also notice that the values for
      the keys <em>'blue'</em> and <em>'green'</em> differ between the two arrays.
      A match still occurs because only the keys are checked. The values returned
      are those of <var>$scalarObject->val</var>.
    </p>
    <p>
      The two keys from the <em>key => value</em> pairs are considered equal only if
      <em>(string) $key1 === (string) $key2 </em>. In other words a strict type check
      is executed so the string representation must be the same.
    </p>
  </div>
</div>
</body>
