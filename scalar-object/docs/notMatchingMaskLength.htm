<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>notMatchingMaskLength( string <var>$mask</var>, int <var>$start</var> = null, integer <var>$length</var> = null ): int</code>
  <p>
    Context: string.<br/>
    Alias of <a href="http://php.net/manual/en/function.strcspn.php">strcspn</a>.<br/>
    Find the length of initial segment not matching the mask.
  </p>
</div>
<div class="ajax-area">
  <h1>notMatchingMaskLength</h1>

  <div>
    <p>
      Returns the length of the initial segment of <var>$scalarObject->val</var>
      which does <em>not</em> contain any of the characters in <var>$mask</var>.
    </p>
    <p>
      If <var>$start</var> and <var>$length</var> are omitted, then all of
      <var>$scalarObject->val</var> will be examined. If they are included,
      then the effect will be the same as calling <code>notMatchingMaskLength(substr($subject, $start, $length),
      $mask)</code> (see <a href="substrAt.htm">substrAt</a> for more information).
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>subject</dt>
      <dd>The string to examine.</dd>

      <dt>mask</dt>
      <dd>The string containing every disallowed character.</dd>

      <dt>start</dt>
      <dd>
        <p>The position in <var>$scalarObject->val</var> to start searching.</p>
        <p>
          If <var>$start</var> is given and is non-negative, then
          <strong>notMatchingMaskLength()</strong> will begin examining
          <var>$scalarObject->val</var> at the <var>$start</var>'th position. For
          instance, in the string '<em>abcdef</em>', the character at
          position <em>0</em> is '<em>a</em>', the character at position
          <em>2</em> is '<em>c</em>', and so forth.
        </p>
        <p>
          If <var>$start</var> is given and is negative, then
          <a href="matchingMaskLength.htm">matchingMaskLength()</a> will begin examining
          <var>$scalarObject->val</var> at the <var>$start</var>'th position from
          the end of <var>$scalarObject->val</var>.
        </p>
      </dd>

      <dt>length</dt>
      <dd>
        <p>The length of the segment from <var>$scalarObject->val</var> to examine.</p>
        <p>
          If <var>$length</var> is given and is non-negative, then <var>$scalarObject->val</var>
          will be examined for <var>$length</var> characters after the starting position.
        </p>
        <p>
          If <var>$length</var> is given and is negative, then <var>$scalarObject->val</var> will
          be examined from the starting position up to <var>$length</var> characters
          from the end of <var>$scalarObject->val</var>.
        </p>
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the length of the initial segment of <var>$scalarObject->val</var>
      which consists entirely of characters <em>not</em> in <var>$mask</var>.
    </p>

    <blockquote>
      <strong>Note</strong>: When a <var>$start</var> parameter is set, the
      returned length is counted starting from this position, not from the
      beginning of <var>$scalarObject->val</var>.
    </blockquote>
  </div>

 <div class="examples">
   <p><strong>Example #1 notMatchingMaskLength() example</strong></p>
    <pre class="php-code">
      <?php
      $a = notMatchingMaskLength('abcd',  'apple');
      $b = notMatchingMaskLength('abcd',  'banana');
      $c = notMatchingMaskLength('hello', 'l');
      $d = notMatchingMaskLength('hello', 'world');
      $e = notMatchingMaskLength('abcdhelloabcd', 'abcd', -9);
      $f = notMatchingMaskLength('abcdhelloabcd', 'abcd', -9, -5);

      var_dump($a);
      var_dump($b);
      var_dump($c);
      var_dump($d);
      var_dump($e);
      var_dump($f);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      int(0)
      int(0)
      int(2)
      int(2)
      int(5)
      int(4)
    </pre>
  </div>

  <blockquote><strong>Note</strong>:This function is binary-safe.</blockquote>
</div>
</body>
