<h1>notMatchingMaskLength</h1>

 <div>
  <p>
   Returns the length of the initial segment of
   <code>subject</code> which does <em>not</em>
   contain any of the characters in <code>mask</code>.
  </p>
  <p>
   If <code>start</code> and <code>length</code>
   are omitted, then all of <code>subject</code> will be
   examined. If they are included, then the effect will be the same as
   calling <em>notMatchingMaskLength(substr($subject, $start, $length),
   $mask)</em> (see <a href="function.substr.php">substr</a>
   for more information).
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
  <p>
   <dl>
     <dt><code>subject</code></dt>
     <dd>The string to examine.</dd>

     <dt><code>mask</code></dt>
     <dd>The string containing every disallowed character.</dd>

     <dt><code>start</code></dt>
     <dd><p>The position in <code>subject</code> to start searching.</p>
      <p>
       If <code>start</code> is given and is non-negative,
       then <strong>notMatchingMaskLength()</strong> will begin
       examining <code>subject</code> at
       the <code>start</code>&#039;th position. For instance, in
       the string &#039;<em>abcdef</em>&#039;, the character at
       position <em>0</em> is &#039;<em>a</em>&#039;, the
       character at position <em>2</em> is
       &#039;<em>c</em>&#039;, and so forth.
      </p>
      <p>
       If <code>start</code> is given and is negative,
       then <a href="function.strspn.php">strspn()</a> will begin
       examining <code>subject</code> at
       the <code>start</code>&#039;th position from the end
       of <code>subject</code>.</p></dd>

     <dt><code>length</code></dt>
     <dd><p>The length of the segment from <code>subject</code> to examine.</p>
      <p>
       If <code>length</code> is given and is non-negative,
       then <code>subject</code> will be examined
       for <code>length</code> characters after the starting
       position.
      </p>
      <p>
       If <code>length</code> is given and is negative,
       then <code>subject</code> will be examined from the
       starting position up to <code>length</code>
       characters from the end of <code>subject</code>.</p></dd>
   </dl>
  </p>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns the length of the initial segment of <code>subject</code>
   which consists entirely of characters <em>not</em> in <code>mask</code>.
  </p>
  <blockquote><strong>Note</strong>:
    When a <code>start</code> parameter is set, the returned length
    is counted starting from this position, not from the beginning of
    <code>subject</code>.
   </blockquote>
 </div>

 <div class="examples">
  <div>
   <p><strong>Example #1 notMatchingMaskLength() example</strong></p>
   <pre><span style="color: #0000BB">&lt;?php<br />$a&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">notMatchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcd'</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$b&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">notMatchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcd'</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$c&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">notMatchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'l'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$d&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">notMatchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">'hello'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'world'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$e&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">notMatchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdhelloabcd'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'abcd'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #0000BB">9</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$f&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">notMatchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">'abcdhelloabcd'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'abcd'</span><span style="color: #007700">,&nbsp;-</span><span style="color: #0000BB">9</span><span style="color: #007700">,&nbsp;-</span><span style="color: #0000BB">5</span><span style="color: #007700">);<br /><br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$a</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$b</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$c</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$d</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$e</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$f</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></pre>

   <div>The above example will output:</div>
<pre>
int(0)
int(0)
int(2)
int(2)
int(5)
int(4)
</pre>
  </div>
 </div>

  <blockquote><strong>Note</strong>:This function is binary-safe.</blockquote>
