  <h1>naturalSort</h1>

  <div>
    This function implements a sort algorithm that orders alphanumeric strings
    in the way a human being would while maintaining key/value associations.
    This is described as a "natural ordering".  An example of the difference
    between this algorithm and the regular computer string sorting algorithms
    (used in <a href="function.sort.php">sort()</a>) can be seen in the example below.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>array</dt>
      <dd>The input array.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns <code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 naturalSort() examples demonstrating basic usage</strong></p>
    <pre class="php-code">
      <?php
      $array1 = $array2 = array("img12.png", "img10.png", "img2.png", "img1.png");

      asort($array1);
      echo "Standard sorting\n";
      print_r($array1);

      naturalSort($array2);
      echo "\nNatural order sorting\n";
      print_r($array2);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Standard sorting
      Array
      (
          [3] => img1.png
          [1] => img10.png
          [0] => img12.png
          [2] => img2.png
      )

      Natural order sorting
      Array
      (
          [3] => img1.png
          [2] => img2.png
          [1] => img10.png
          [0] => img12.png
      )
    </pre>

    <div>
      For more information see: Martin Pool's 
      <a href="http://sourcefrog.net/projects/naturalSort/">&raquo; Natural Order String Comparison</a> page.
    </div>

    <p><strong>Example #2 naturalSort() examples demonstrating potential gotchas</strong></p>
    <pre class="php-code">
      <?php
      echo "Negative numbers\n";
      $negative = array('-5','3','-2','0','-1000','9','1');
      print_r($negative);
      naturalSort($negative);
      print_r($negative);

      echo "Zero padding\n";
      $zeros = array('09', '8', '10', '009', '011', '0'); 
      print_r($zeros);
      naturalSort($zeros);
      print_r($zeros);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Negative numbers
      Array
      (
          [0] => -5
          [1] => 3
          [2] => -2
          [3] => 0
          [4] => -1000
          [5] => 9
          [6] => 1
      )
      Array
      (
          [2] => -2
          [0] => -5
          [4] => -1000
          [3] => 0
          [6] => 1
          [1] => 3
          [5] => 9
      )

      Zero padding
      Array
      (
          [0] => 09
          [1] => 8
          [2] => 10
          [3] => 009
          [4] => 011
          [5] => 0
      )
      Array
      (
          [5] => 0
          [1] => 8
          [3] => 009
          [0] => 09
          [2] => 10
          [4] => 011
      )
    </pre>
  </div>
