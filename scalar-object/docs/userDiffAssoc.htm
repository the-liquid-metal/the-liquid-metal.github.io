<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>userDiffAssoc</h1>

  <div>
    <p>
      Computes the difference of arrays with additional index check, compares
      data by a callback function.
    </p>
    <blockquote>
      <strong>Note</strong>: Please note that this function only checks one dimension of a
      n-dimensional array. Of course you can check deeper dimensions by using, for example,
      <em>userDiffAssoc($array1[0], $array2[0], "some_comparison_func");</em>.
    </blockquote>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>array1</dt>
      <dd>The first array.</dd>

      <dt>array2</dt>
      <dd>The second array.</dd>

      <dt>value_compare_func</dt>
      <dd>
        The comparison function must return an integer less than, equal to, or greater than zero if the
        first argument is considered to be respectively less than, equal to, or greater than the second.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      <strong>userDiffAssoc()</strong> returns an <a href="language.types.array.php">array</a>
      containing all the values from <code>array1</code> that are not present in any of the other
      arguments. Note that the keys are used in the comparison unlike
      <a href="function.array-diff.php">array_diff()</a> and <a href="function.array-udiff.php">
      array_udiff()</a>. The comparison of arrays' data is performed by using an user-supplied
      callback. In this aspect the behaviour is opposite to the behaviour of
      <a href="function.array-diff-assoc.php">array_diff_assoc()</a> which uses internal function
      for comparison.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 userDiffAssoc() example</strong></p>
    <pre class="php-code">
      <?php
      class cr {
          private $priv_member;
          function cr($val)
          {
              $this->priv_member = $val;
          }

          static function comp_func_cr($a, $b)
          {
              if ($a->priv_member === $b->priv_member) return 0;
              return ($a->priv_member > $b->priv_member)? 1:-1;
          }
      }

      $a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
      $b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

      $result = userDiffAssoc($a, $b, array("cr", "comp_func_cr"));
      print_r($result);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [0.1] => cr Object
              (
                  [priv_member:private] => 9
              )
          [0.5] => cr Object
              (
                  [priv_member:private] => 12
              )
          [0] => cr Object
              (
                  [priv_member:private] => 23
              )
      )
    </pre>

    <p>
      In our example above you see the <em>"1" => new cr(4)</em> pair is present
      in both arrays and thus it is not in the output from the function.
    </p>
  </div>
</div>
</body>
