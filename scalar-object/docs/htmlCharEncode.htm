  <h1>htmlCharEncode</h1>

  <div>
    <p>
      Certain characters have special significance in HTML, and should be represented by HTML
      entities if they are to preserve their meanings. This function returns a string with these
      conversions made. If you require all input substrings that have associated named entities
      to be translated, use <a href="function.htmlentities.php">htmlentities()</a> instead.
    </p>
    <p>
      If the input string passed to this function and the final document share the same character
      set, this function is sufficient to prepare input for inclusion in most contexts of an HTML
      document. If, however, the input can represent characters that are not coded in the final
      document character set and you wish to retain those characters (as numeric or named entities),
      both this function and <a href="function.htmlentities.php">htmlentities()</a> (which only encodes
      substrings that have named entity equivalents) may be insufficient. You may have to use
      <a href="function.mb-encode-numericentity.php">mb_encode_numericentity()</a> instead.
    </p>
    <p>The translations performed are:</p>
    <ul>
      <li>'&amp;' (ampersand) becomes '&amp;amp;'</li>
      <li>'"' (double quote) becomes '&amp;quot;' when <code>ENT_NOQUOTES</code> is not set.</li>
      <li>"'" (single quote) becomes '&amp;#039;' (or &amp;apos;) only when <code>ENT_QUOTES</code> is set.</li>
      <li>'&lt;' (less than) becomes '&amp;lt;'</li>
      <li>'>' (greater than) becomes '&amp;gt;'</li>
    </ul>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>string</dt>
      <dd>The <a href="language.types.string.php">string</a> being converted.</dd>

      <dt>flags</dt>
      <dd>
        <p>
          A bitmask of one or more of the following flags, which specify how to handle quotes,
          invalid code unit sequences and the used document type. The default is <em>ENT_COMPAT
          | ENT_HTML401</em>.
        </p>
        <table class="table">
          <caption><strong>Available <code>flags</code> constants</strong></caption>
          <thead>
            <tr>
              <th>Constant Name</th>
              <th>Description</th>
            </tr>
          </thead>

          <tbody>
            <tr>
              <td><code>ENT_COMPAT</code></td>
              <td>Will convert double-quotes and leave single-quotes alone.</td>
            </tr>

            <tr>
              <td><code>ENT_QUOTES</code></td>
              <td>Will convert both double and single quotes.</td>
            </tr>

            <tr>
              <td><code>ENT_NOQUOTES</code></td>
              <td>Will leave both double and single quotes unconverted.</td>
            </tr>

            <tr>
              <td><code>ENT_IGNORE</code></td>
              <td>
                Silently discard invalid code unit sequences instead of returning 
                an empty string. Using this flag is discouraged as it
                <a href="http://unicode.org/reports/tr36/#Deletion_of_Noncharacters">&raquo; may have security implications</a>.
              </td>
            </tr>

            <tr>
              <td><code>ENT_SUBSTITUTE</code></td>
              <td>
                Replace invalid code unit sequences with a Unicode Replacement Character
                U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.
              </td>
            </tr>

            <tr>
              <td><code>ENT_DISALLOWED</code></td>
              <td>
                Replace invalid code points for the given document type with a Unicode Replacement Character
                U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of leaving them as is. This may be useful,
                for instance, to ensure the well-formedness of XML documents with embedded external content.
              </td>
            </tr>

            <tr>
              <td><code>ENT_HTML401</code></td>
              <td>Handle code as HTML 4.01.</td>
            </tr>

            <tr>
              <td><code>ENT_XML1</code></td>
              <td>Handle code as XML 1.</td>
            </tr>

            <tr>
              <td><code>ENT_XHTML</code></td>
              <td>Handle code as XHTML.</td>
            </tr>

            <tr>
              <td><code>ENT_HTML5</code></td>
              <td>Handle code as HTML 5.</td>
            </tr>
          </tbody>
        </table>
      </dd>

      <dt>encoding</dt>
      <dd>
        <p>
          An optional argument defining the encoding used when converting characters.
        </p>
        <p>
          If omitted, the default value of the <code>encoding</code> varies depending on the PHP version
          in use. In PHP 5.6 and later, the <a href="ini.core.php#ini.default-charset">default_charset</a>
          configuration option is used as the default value. PHP 5.4 and 5.5 will use <em>UTF-8</em> as
          the default. Earlier versions of PHP use <em>ISO-8859-1</em>.
        </p>
        <p>
          Although this argument is technically optional, you are highly encouraged to
          specify the correct value for your code if you are using PHP 5.5 or earlier,
          or if your <a href="ini.core.php#ini.default-charset">default_charset</a>
          configuration option may be set incorrectly for the given input.
        </p>
        <p>
          For the purposes of this function, the encodings <em>ISO-8859-1</em>, <em>ISO-8859-15</em>, <em>UTF-8</em>,
          <em>cp866</em>, <em>cp1251</em>, <em>cp1252</em>, and <em>KOI8-R</em> are effectively equivalent, provided
          the <code>string</code> itself is valid for the encoding, as the characters affected by
          <strong>htmlCharEncode()</strong> occupy the same positions in all of these encodings.
        </p>

        <p>The following character sets are supported:</p>
        <table class="table">
          <caption><strong>Supported charsets</strong></caption>
          <thead>
            <tr>
              <th>Charset</th>
              <th>Aliases</th>
              <th>Description</th>
            </tr>
          </thead>

          <tbody>
            <tr>
              <td>ISO-8859-1</td>
              <td>ISO8859-1</td>
              <td>Western European, Latin-1.</td>
            </tr>

            <tr>
              <td>ISO-8859-5</td>
              <td>ISO8859-5</td>
              <td>Little used cyrillic charset (Latin/Cyrillic).</td>
            </tr>

            <tr>
              <td>ISO-8859-15</td>
              <td>ISO8859-15</td>
              <td>
                Western European, Latin-9. Adds the Euro sign, French and Finnish
                letters missing in Latin-1 (ISO-8859-1).
              </td>
            </tr>

            <tr>
              <td>UTF-8</td>
              <td> </td>
              <td>ASCII compatible multi-byte 8-bit Unicode.</td>
            </tr>

            <tr>
              <td>cp866</td>
              <td>ibm866, 866</td>
              <td>DOS-specific Cyrillic charset.</td>
            </tr>

            <tr>
              <td>cp1251</td>
              <td>Windows-1251, win-1251, 1251</td>
              <td>Windows-specific Cyrillic charset.</td>
            </tr>

            <tr>
              <td>cp1252</td>
              <td>Windows-1252, 1252</td>
              <td>Windows specific charset for Western European.</td>
            </tr>

            <tr>
              <td>KOI8-R</td>
              <td>koi8-ru, koi8r</td>
              <td>Russian.</td>
            </tr>

            <tr>
              <td>BIG5</td>
              <td>950</td>
              <td>Traditional Chinese, mainly used in Taiwan.</td>
            </tr>

            <tr>
              <td>GB2312</td>
              <td>936</td>
              <td>Simplified Chinese, national standard character set.</td>
            </tr>

            <tr>
              <td>BIG5-HKSCS</td>
              <td> </td>
              <td>Big5 with Hong Kong extensions, Traditional Chinese.</td>
            </tr>

            <tr>
              <td>Shift_JIS</td>
              <td>SJIS, SJIS-win, cp932, 932</td>
              <td>Japanese</td>
            </tr>

            <tr>
              <td>EUC-JP</td>
              <td>EUCJP, eucJP-win</td>
              <td>Japanese</td>
            </tr>

            <tr>
              <td>MacRoman</td>
              <td> </td>
              <td>Charset that was used by Mac OS.</td>
            </tr>

            <tr>
              <td><em>''</em></td>
              <td> </td>
              <td>
                An empty string activates detection from script encoding (Zend multibyte),
                <a href="ini.core.php#ini.default-charset">default_charset</a> and current
                locale (see <a href="function.nl-langinfo.php">nl_langinfo()</a> and
                <a href="function.setlocale.php">setlocale()</a>), in this order. Not recommended.
              </td>
            </tr>
          </tbody>
        </table>

        <blockquote>
          <strong>Note</strong>: Any other character sets are not recognized. The default
          encoding will be used instead and a warning will be emitted.
        </blockquote>
      </dd>

      <dt>double_encode</dt>
      <dd>
        When <code>double_encode</code> is turned off PHP will not
        encode existing html entities, the default is to convert everything.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>The converted <a href="language.types.string.php">string</a>.</p>
    <p>
      If the input <code>string</code> contains an invalid code unit sequence within the
      given <code>encoding</code> an empty string will be returned, unless either the
      <code>ENT_IGNORE</code> or <code>ENT_SUBSTITUTE</code> flags are set.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 htmlCharEncode() example</strong></p>
    <pre class="php-code">
      <?php
      $new = htmlCharEncode("&lt;a href='test'>Test&lt;/a>", ENT_QUOTES);
      echo $new; // &amp;lt;a href=&amp;#039;test&amp;#039;&amp;gt;Test&amp;lt;/a&amp;gt;
      ?>
    </pre>
  </div>

  <blockquote>
    <strong>Note</strong>: Note that this function does not translate anything beyond what is
    listed above. For full entity translation, see <a href="function.htmlentities.php">htmlentities()</a>.
  </blockquote>
