<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>intersectKey</h1>

    <div class="short-description">
        <code>intersectKey (callable <var>$keyComparator</var>, iterable ...<var>$arrays</var>): ScalarArray|ObjectArray</code>
        <p>
            Computes the intersection using a callback function on the keys for comparison.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-intersect-key.php">array_intersect_key</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-intersect-ukey.php">array_intersect_ukey</a>.<br/>
        </p>
    </div>

    <div>
        <strong>keyIntersect()</strong> returns an array
        containing all the entries of <em>internal array</em>
        which have keys that are present in all the arguments.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>An array to compare keys against.</dd>

        <dt>...</dt>
        <dd>A variable list of arrays to compare.</dd>
    </dl>

    <h3>Return Values</h3>
    <p>
        Returns an associative array containing all the entries of <em>internal array</em>
        which have keys that are present in all arguments.
    </p>

    <p>
        In our example you see that only the keys <em>'blue'</em> and <em>'green'</em>
        are present in both arrays and thus returned. Also notice that the values for
        the keys <em>'blue'</em> and <em>'green'</em> differ between the two arrays.
        A match still occurs because only the keys are checked. The values returned
        are those of <em>internal array</em>.
    </p>

    <p>
        The two keys from the <em>key => value</em> pairs are considered equal only if
        <em>(string) $key1 === (string) $key2 </em>. In other words a strict type check
        is executed so the string representation must be the same.
    </p>

    <h2>userKeyIntersect</h2>

    <div>
        <strong>userKeyIntersect()</strong> returns an array
        containing all the values of <em>internal array</em>
        which have matching keys that are present in all the arguments.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>First array to compare keys against.</dd>

        <dt>...</dt>
        <dd>Variable list of array arguments to compare keys against.</dd>

        <dt>$keyComparator</dt>
        <dd>
            The comparison function must return an integer less than, equal to, or greater than zero if the
            first argument is considered to be respectively less than, equal to, or greater than the second.
        </dd>
    </dl>

    <h3>Return Values</h3>
    <p>The values of <em>internal array</em> whose keys exist in all the arguments.</p>

    <p>
        In our example you see that only the keys <em>'blue'</em> and <em>'green'</em> are present
        in both arrays and thus returned. Also notice that the values for the keys <em>'blue'</em>
        and <em>'green'</em> differ between the two arrays. A match still occurs because only the
        keys are checked. The values returned are those of <em>internal array</em>.
    </p>

    <pre class="php-code">
        $arr1 = ["blue" => 1,  "red" => 2,  "green" => 3,  "purple" => 4];
        $arr2 = ["green" => 5, "blue" => 6, "yellow" => 7, "cyan" => 8];

        $func = fn($key1, $key2) => $key1 <=> $key2;

        $sa = new ScalarArray("int", false, $arr1);
        $sa->intersectKey(BUILDIN_KEY_COMPARATOR, $arr2); // output: ["blue" => 1, "green" => 3]
        $sa->intersectKey($func, $arr2);                  // output: ["blue" => 1, "green" => 3]
    </pre>
</div>
</body>
