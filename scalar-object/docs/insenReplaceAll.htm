  <h1>insenReplaceAll</h1>

  <div>
    This function returns a string or an array with all occurrences of <code>search</code>
    in <code>subject</code> (ignoring case) replaced with the given <code>replace</code>
    value.  If you don't need fancy replacing rules, you should generally use this function
    instead of <a href="function.preg-replace.php">preg_replace()</a> with the <em>i</em> modifier.
  </div>

  <div>
    <h3>Parameters</h3>
    <p>
      If <code>search</code> and <code>replace</code> are arrays, then <strong>insenReplaceAll()</strong>
      takes a value from each array and uses them to search and replace on <code>subject</code>. If
      <code>replace</code> has fewer values than <code>search</code>, then an empty string is used for
      the rest of replacement values. If <code>search</code> is an array and <code>replace</code> is a
      string, then this replacement string is used for every value of <code>search</code>. The converse
      would not make sense, though.
    </p>
    <p>
      If <code>search</code> or <code>replace</code>
      are arrays, their elements are processed first to last.
    </p>
    <dl>
      <dt>search</dt>
      <dd>
        The value being searched for, otherwise known as the <em>needle</em>.
        An array may be used to designate multiple needles.
      </dd>

      <dt>replace</dt>
      <dd>
        The replacement value that replaces found <code>search</code>
        values. An array may be used to designate multiple replacements.
      </dd>

      <dt>subject</dt>
      <dd>
        <p>
          The string or array being searched and replaced on,
          otherwise known as the <em>haystack</em>.
        </p>
        <p>
          If <code>subject</code> is an array, then the search and replace is performed
          with every entry of <code>subject</code>, and the return value is an array as well.
        </p>
      </dd>

      <dt>count</dt>
      <dd>If passed, this will be set to the number of replacements performed.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns a string or an array of replacements.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 insenReplaceAll() example</strong></p>
    <pre class="php-code">
      <?php
      $bodytag = insenReplaceAll("%body%", "black", "&lt;body text=%BODY%>");
      ?>
    </pre>
  </div>

  <blockquote><strong>Note</strong>:This function is binary-safe.</blockquote>

  <div class="caution">
    <strong>Caution</strong>
    <h1>Replacement order gotcha</h1>
    <p>
      Because <strong>insenReplaceAll()</strong> replaces left to right, it might
      replace a previously inserted value when doing multiple replacements.
      Example #2 in the <a href="function.str-replace.php">str_replace()</a> documentation
      demonstrates how this may affect you in practice.
    </p>
  </div>
