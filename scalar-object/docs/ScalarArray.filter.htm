<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>filter</h1>

    <div class="short-description">
        <code>filter (callable <var>$filter</var>): static</code>
        <p>
            see <a target="_blank" href="http://php.net/manual/en/function.array-filter.php">array_filter</a>.<br/>
        </p>
    </div>

    <div>
        Iterates over each value in the <var>$scalarObject->val</var> passing them to the <var>$filter</var>
        function. If the <var>$filter</var> function returns true, the current value from
        <var>$scalarObject->val</var> is returned into the result array. Array keys are preserved.
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>callback</dt>
            <dd>
                <p>The callback function to use</p>
                <p>
                    If no <var>$filter</var> is supplied, all entries of <var>$scalarObject->val</var> equal to
                    <code>FALSE</code> (see <a href="language.types.boolean.php#language.types.boolean.casting">
                    converting to boolean</a>) will be removed.
                </p>
            </dd>

            <dt>flag</dt>
            <dd>
                <p>Flag determining what arguments are sent to <var>$filter</var>:</p>
                <ul>
                    <li>
                        <code>ARRAY_FILTER_USE_KEY</code> - pass key as the only argument
                        to <var>$filter</var> instead of the value
                    </li>
                    <li>
                        <code>ARRAY_FILTER_USE_BOTH</code> - pass both value and key as
                        arguments to <var>$filter</var> instead of the value
                    </li>
                </ul>
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>Returns the filtered array.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            function odd($var) {
                // returns whether the input integer is odd
                return($var &amp; 1);
            }

            function even($var) {
                // returns whether the input integer is even
                return(!($var &amp; 1));
            }

            $array1 = ["a" => 1, "b" => 2, "c" => 3, "d" => 4, "e" => 5];
            filter($array1, "odd"); // output: ["a" => 1, "c" => 3, "e" => 5]

            $array2 = [6, 7, 8, 9, 10, 11, 12];
            filter($array2, "even"); // output: [0 => 6, 2 => 8, 4 => 10, 6 => 12]

            $entry = [0 => "foo", 1 => false, 2 => -1, 3 => null, 4 => ""];
            filter($entry); // output: [0 => "foo", 2 => -1]

            $arr = ["a" => 1, "b" => 2, "c" => 3, "d" => 4];
            filter($arr, fn($k) => $k == "b", ARRAY_FILTER_USE_KEY); // output: ["b" => 2]
            filter($arr, fn($v, $k) => $k == "b" || $v == 4, ARRAY_FILTER_USE_BOTH); // output: ["b" => 2, "d" => 4]
        </pre>
    </div>

    <div class="caution">
        <strong>Caution</strong><br/>
        If the array is changed from the callback function (e.g. element
        added, deleted or unset) the behavior of this function is undefined.
    </div>
</div>
</body>
