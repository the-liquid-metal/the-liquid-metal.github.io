<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>pow</h1>

  <div class="short-description">
    <code>pow( number <var>$exp</var> ): number</code>
    <p>
      Context: number.<br/>
      Alias of <a href="http://php.net/manual/en/function.pow.php">pow</a>.<br/>
      Exponential expression.
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$exp</dt>
      <dd>The exponent</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      <var>$scalarObject->val</var> raised to the power of <var>$exp</var>. If both arguments
      are non-negative integers and the result can be represented as an integer, the result
      will be returned with integer type, otherwise it will be returned as a float.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 Some examples of <strong>pow()</strong></strong></p>
    <pre class="php-code">
      <?php
      var_dump(pow(2, 8)); // int(256)
      echo pow(-1, 20); // 1
      echo pow(0, 0); // 1

      echo pow(-1, 5.5); // PHP >4.0.6  NAN
      echo pow(-1, 5.5); // PHP &lt;=4.0.6 1.#IND
      ?>
    </pre>
  </div>

  <blockquote>
    <strong>Note</strong>: This function will convert all input to a number,
    even non-scalar values, which could lead to <em>weird</em> results.
  </blockquote>
</div>
</body>
