<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>walk</h1>

    <div class="short-description">
        <code>walk (callable <var>$callback</var>, bool <var>$recursive</var> = false, mixed <var>$userData</var> = null): ScalarArray|ObjectArray</code>
        <p>
            Apply a callback function recursively to every elements.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-walk.php">array_walk</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-walk-recursive.php">array_walk_recursive</a>.<br/>
        </p>
    </div>

    <p>
        Applies the user-defined <var>$callback</var> function to each
        element of the <em>internal array</em>.
    </p>
    <!-- pointer is not relevant -->

    <h3>Parameters</h3>
    <dl>
        <dt>$callback</dt>
        <dd>
            <p>
                Typically, <var>$callback</var> takes on two parameters. The
                <em>internal array</em> parameter's value being the first, and the
                key/index second.
            </p>
            <blockquote>
                <strong>Note</strong>: If <var>$callback</var> needs to be working with the
                actual values of the array, specify the first parameter of <var>$callback</var>
                as a reference. Then, any changes made to those elements will be made in the
                original array itself.
            </blockquote>
            <blockquote>
                <strong>Note</strong>: Many internal functions (for example
                <a href="lowercase.htm">lowercase()</a>) will throw a warning
                if more than the expected number of argument are passed in and are not
                usable directly as a <var>$callback</var>.
            </blockquote>
            <p>
                Only the values of the <em>internal array</em> may potentially be
                changed; its structure cannot be altered, i.e., the programmer cannot
                add, unset or reorder elements. If the callback does not respect this
                requirement, the behavior of this function is undefined, and
                unpredictable.
            </p>
        </dd>

        <dt>$userdata</dt>
        <dd>
            If the optional <var>$userdata</var> parameter is supplied, it will
            be passed as the third parameter to the <var>$callback</var>.
        </dd>
    </dl>

    <h3>Return Values</h3>
    <p><code>TRUE</code> on success or <code>FALSE</code> on failure.</p>

    <h3>Errors/Exceptions</h3>
    <p>
        If function <var>$callback</var> requires more parameters than
        given to it, an error of level <a href="errorfunc.constants.php">
        E_WARNING</a> will be generated each time <strong>walk()</strong>
        calls <var>$callback</var>.
    </p>

    <h2>recursiveWalk</h2>

    <div>
        Applies the user-defined <var>$callback</var> function to each
        element of the <em>internal array</em>. This function will recurse
        into deeper arrays.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$callback</dt>
        <dd>
            <p>
                Typically, <var>$callback</var> takes on two parameters. The <em>internal array</em>
                parameter's value being the first, and the key/index second.
            </p>
            <blockquote>
                <strong>Note</strong>: If <var>$callback</var> needs to be working with the
                actual values of the array, specify the first parameter of <var>$callback</var>
                as a reference. Then, any changes made to
                those elements will be made in the original array itself.
            </blockquote>
        </dd>

        <dt>userdata</dt>
        <dd>
            If supplied, it will be passed as the
            third parameter to the <var>$callback</var>.
        </dd>
    </dl>

    <h3>Return Values</h3>
    <p>Returns <code>TRUE</code> on success or <code>FALSE</code> on failure.</p>

    <pre class="php-code">
        $fruits = new ScalarArray(["d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple"]);

        $testPrint = function ($item2, $key) {
            echo "$key. $item2&lt;br/>\n";
        };
        $fruits->walk($testPrint);
        // output:
        //> d. lemon
        //> a. orange
        //> b. banana
        //> c. apple

        $testAlter = function (&amp;$item1, $key, $prefix) {
            $item1 = "$prefix: $item1";
        };
        $fruits->walk($testAlter, false "fruit");
        // output:
        //> d. fruit: lemon
        //> a. fruit: orange
        //> b. fruit: banana
        //> c. fruit: apple


        $fruits = new ScalarArray([
            "sweet" => ["a" => "apple", "b" => "banana"],
            "sour" => ["c" => "lemon"],
        ]);
        $testPrint = function ($item, $key) {
            echo "$key holds $item\n";
        }
        $fruits->walk($testPrint, true);
        // output:
        //> a holds apple
        //> b holds banana
        //> c holds lemon
    </pre>

    <div>
        You may notice that the key '<em>sweet</em>' is never displayed. Any key that holds an
        array will not be passed to the function.
    </div>
</div>
</body>
