<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>searchKeys</h1>

    <div class="short-description">
        <code>searchKeys (mixed <var>$value</var>, bool <var>$strict</var> = false): self</code>
        <p>
            Searches a given value and returns the first corresponding key if successful.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-keys.php">array_keys</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-search.php">array_search</a>.<br/>
        </p>
    </div>

    <div>
        <p>
            <strong>keys()</strong> returns the keys, numeric and
            string, from the <var>$scalarObject->val</var>.
        </p>
        <p>
            If the optional <var>$searchValue</var> is specified,
            then only the keys for that value are returned. Otherwise, all
            the keys from the <var>$scalarObject->val</var> are returned.
        </p>
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$searchValue</dt>
            <dd>If specified, then only keys containing these values are returned.</dd>

            <dt>$strict</dt>
            <dd>Determines if strict comparison (===) should be used during the search.</dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>Returns an array of all the keys in <var>$scalarObject->val</var>.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            $array = [0 => 100, "color" => "red"];
            keys($array); // output: [0, "color"]

            $array = ["blue", "red", "green", "blue", "blue"];
            keys($array, "blue"); // output: [0, 3, 4]

            $array = [
                "color" => ["blue", "red", "green"],
                "size"  => ["small", "medium", "large"],
            ];
            keys($array); // output: ["color", "size"]
        </pre>
    </div>

    <h2>search</h2>

    <div>Searches <var>$scalarObject->val</var> for <var>$needle</var>.</div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$needle</dt>
            <dd>
                The searched value. If it is a string, the
                comparison is done in a case-sensitive manner.
            </dd>

            <dt>$strict</dt>
            <dd>
                If it is set to <code>TRUE</code> then the
                <strong>search()</strong> function will search for <em>identical</em> elements
                in the <var>$scalarObject->val</var>. This means it will also check the types of the
                <var>$needle</var> in the <var>$scalarObject->val</var>, and objects must be the same instance.
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>
            Returns the key for <var>$needle</var> if it is found in the
            array, <code>FALSE</code> otherwise.
        </p>
        <p>
            If <var>$needle</var> is found in <var>$scalarObject->val</var> more than once, the
            first matching key is returned. To return the keys for all matching values,
            use <a href="function.array-keys.php">array_keys()</a> with the optional
            <code>search_value</code> parameter instead.
        </p>

        <div class="warning">
            <strong>Warning</strong><br/>
            This function may return Boolean <code>FALSE</code>, but may also return
            a non-Boolean value which evaluates to <code>FALSE</code>. Please read the
            section on boolean for more information. Use
            the <code>===</code> operator for testing the return
            value of this function.
        </div>
    </div>

    <div class="examples">
        <pre class="php-code">
            $array = [0 => "blue", 1 => "red", 2 => "green", 3 => "red"];
            search("green", $array); // output: 2
            search("red", $array);   // output: 1
        </pre>
    </div>
</div>
</body>
