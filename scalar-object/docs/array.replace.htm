<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>replace</h1>

  <div class="short-description">
    <code>replace( array <var>$array2</var>, array <var>...</var> ): array</code>
    <p>
      Context: array.<br/>
      Alias of <a href="http://php.net/manual/en/function.array-replace.php">array_replace</a>.<br/>
      Replaces elements from passed arrays into the first array.
    </p>
  </div>

  <div>
    <p>
      <strong>replace()</strong> replaces the values of <var>$scalarObject->val</var> with values
      having the same keys in each of the following arrays. If a key from the first array exists
      in the second array, its value will be replaced by the value from the second array. If the
      key exists in the second array, and not the first, it will be created in the first array. 
      If a key only exists in the first array, it will be left as is. If several arrays are passed
      for replacement, they will be processed in order, the later arrays overwriting the previous
      values.
    </p>
    <p>
      <strong>replace()</strong> is not recursive : it will replace
      values in the first array by whatever type is in the second array.
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$array2</dt>
      <dd>The array from which elements will be extracted.</dd>

      <dt>...</dt>
      <dd>
        More arrays from which elements will be extracted.
        Values from later arrays overwrite the previous values.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns an array, or <code>NULL</code> if an error occurs.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 replace() example</strong></p>
    <pre class="php-code">
      <?php
      $base = array("orange", "banana", "apple", "raspberry");
      $replacements = array(0 => "pineapple", 4 => "cherry");
      $replacements2 = array(0 => "grape");

      $basket = replace($base, $replacements, $replacements2);
      print_r($basket);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [0] => grape
          [1] => banana
          [2] => apple
          [3] => raspberry
          [4] => cherry
      )
    </pre>
  </div>
</div>
</body>
