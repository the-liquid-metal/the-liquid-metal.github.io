<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>moneyFormat</h1>

  <div>
    <strong>moneyFormat()</strong> returns a formatted version of
    <code>number</code>.  This function wraps the C library
    function <strong>strfmon()</strong>, with the difference that
    this implementation converts only one number at a time.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>format</dt>
      <dd>
        <p>The format specification consists of the following sequence:</p>
        <ul>
          <li><p>a <em>%</em> character</p></li>
          <li><p>optional flags</p></li>
          <li><p>optional field width</p></li>
          <li><p>optional left precision</p></li>
          <li><p>optional right precision</p></li>
          <li><p>a required conversion character</p></li>
        </ul>

        <h5>Flags</h5>
        <p>One or more of the optional flags below can be used:</p>
        <dl>
          <dt><em>=</em>f</dt>
          <dd>
            The character <em>=</em> followed by a (single byte)
            character f to be used as the numeric fill
            character. The default fill character is space.
          </dd>

          <dt><em>^</em></dt>
          <dd>Disable the use of grouping characters (as defined by the current locale).</dd>

          <dt><em>+</em> or <em>(</em></dt>
          <dd>
            Specify the formatting style for positive and negative numbers.
            If <em>+</em> is used, the locale's equivalent for
            <em>+</em> and <em>-</em> will be used. If
            <em>(</em> is used, negative amounts are enclosed in
            parenthesis. If no specification is given, the default is
            <em>+</em>.
          </dd>

          <dt><em>!</em></dt>
          <dd>Suppress the currency symbol from the output string.</dd>

          <dt><em>-</em></dt>
          <dd>
            If present, it will make all fields left-justified (padded to the
            right), as opposed to the default which is for the fields to be
            right-justified (padded to the left).
          </dd>
        </dl>

        <h5>Field width</h5>
        <dl>
          <dt>w</dt>
          <dd>
            A decimal digit string specifying a minimum field width. Field will
            be right-justified unless the flag <em>-</em> is used.
            Default value is 0 (zero).
          </dd>
        </dl>

        <h5>Left precision</h5>
        <dl>
          <dt><em>#</em>n</dt>
          <dd>
            <p>
              The maximum number of digits (n) expected to the left of the decimal character
              (e.g. the decimal point). It is used usually to keep formatted output aligned
              in the same columns, using the fill character if the number of digits is less
              than n. If the number of actual digits is bigger than n, then this specification
              is ignored.
            </p>
            <p>
              If grouping has not been suppressed using the <em>^</em> flag, grouping separators
              will be inserted before the fill characters (if any) are added. Grouping separators
              will not be applied to fill characters, even if the fill character is a digit.
            </p>
            <p>
              To ensure alignment, any characters appearing before or after the number in the
              formatted output such as currency or sign symbols are padded as necessary with
              space characters to make their positive and negative formats an equal length.
            </p>
          </dd>
        </dl>

        <h5>Right precision</h5>
        <dl>
          <dt><em>.</em>p</dt>
          <dd>
            A period followed by the number of digits (p) after the decimal character. If the
            value of p is 0 (zero), the decimal character and the digits to its right will be
            omitted. If no right precision is included, the default will dictated by the current
            local in use. The amount being formatted is rounded to the specified number of digits
            prior to formatting.
          </dd>
        </dl>

        <h5>Conversion characters</h5>
        <dl>
          <dt><em>i</em></dt>
          <dd>
            The number is formatted according to the locale's international
            currency format (e.g. for the USA locale: USD 1,234.56).
          </dd>

          <dt><em>n</em></dt>
          <dd>
            The number is formatted according to the locale's national
            currency format (e.g. for the de_DE locale: EU1.234,56).
          </dd>

          <dt><em>%</em></dt>
          <dd>Returns the <em>%</em> character.</dd>
        </dl>
      </dd>

      <dt>number</dt>
      <dd>The number to be formatted.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the formatted string. Characters before and after the formatting
      string will be returned unchanged. Non-numeric <code>number</code> causes
      returning <code>NULL</code> and emitting <code>E_WARNING</code>.
    </p>
  </div>

  <blockquote>
    <strong>Note</strong>: The function <strong>moneyFormat()</strong> is only
    defined if the system has strfmon capabilities.  For example, Windows does
    not, so <strong>moneyFormat()</strong> is undefined in Windows.
  </blockquote>

  <blockquote>
    <strong>Note</strong>: The <code>LC_MONETARY</code> category of the locale settings,
    affects the behavior of this function. Use <a href="function.setlocale.php">setlocale()</a>
    to set to the appropriate default locale before using this function.
  </blockquote>   

  <div class="examples">
    <p><strong>Example #1 moneyFormat() Example</strong></p>
    <div>We will use different locales and format specifications to illustrate the use of this function.</div>
    <pre class="php-code">
      <?php
      $number = 1234.56;

      // let's print the international format for the en_US locale
      setlocale(LC_MONETARY, 'en_US');
      echo moneyFormat('%i', $number) . "\n";
      // USD 1,234.56

      // Italian national format with 2 decimals`
      setlocale(LC_MONETARY, 'it_IT');
      echo moneyFormat('%.2n', $number) . "\n";
      // Eu 1.234,56

      // Using a negative number
      $number = -1234.5672;

      // US national format, using () for negative numbers
      // and 10 digits for left precision
      setlocale(LC_MONETARY, 'en_US');
      echo moneyFormat('%(#10n', $number) . "\n";
      // ($        1,234.57)

      // Similar format as above, adding the use of 2 digits of right
      // precision and '*' as a fill character
      echo moneyFormat('%=*(#10.2n', $number) . "\n";
      // ($********1,234.57)

      // Let's justify to the left, with 14 positions of width, 8 digits of
      // left precision, 2 of right precision, withouth grouping character
      // and using the international format for the de_DE locale.
      setlocale(LC_MONETARY, 'de_DE');
      echo moneyFormat('%=*^-14#8.2i', 1234.56) . "\n";
      // Eu 1234,56****

      // Let's add some blurb before and after the conversion specification
      setlocale(LC_MONETARY, 'en_GB');
      $fmt = 'The final value is %i (after a 10%% discount)';
      echo moneyFormat($fmt, 1234.56) . "\n";
      // The final value is  GBP 1,234.56 (after a 10% discount)
      ?>
    </pre>
  </div>
</div>
</body>
