<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>htmlEntitiesEncode</h1>

  <div class="short-description">
    <code>htmlEntitiesEncode( int <var>$flags</var> = ENT_COMPAT | ENT_HTML401, string <var>$encoding</var> = ini_get("default_charset"), boolean <var>$doubleEncode</var> = true ): string</code>
    <p>
      Context: string.<br/>
      Alias of <a href="http://php.net/manual/en/function.htmlentities.php">htmlentities</a>.<br/>
      Convert all applicable characters to HTML entities.
    </p>
  </div>

  <div>
    <p>
      This function is identical to <a href="htmlCharEncode.htm">htmlCharEncode()</a>
      in all ways, except with <strong>htmlEntitiesEncode()</strong>, all characters which
      have HTML character entity equivalents are translated into these entities.
    </p>
    <p>
      If you want to decode instead (the reverse) you can use
      <a href="htmlEntitiesDecode.htm">htmlEntitiesDecode()</a>.
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$flags</dt>
      <dd>
        <p>
          A bitmask of one or more of the following flags, which specify how to handle quotes, invalid
          code unit sequences and the used document type. The default is <code>ENT_COMPAT | ENT_HTML401</code>.
        </p>
        <table class="table">
          <caption><strong>Available <var>$flags</var> constants</strong></caption>
          <thead>
            <tr>
              <th>Constant Name</th>
              <th>Description</th>
            </tr>
          </thead>
  
          <tbody>
            <tr>
              <td><code>ENT_COMPAT</code></td>
              <td>Will convert double-quotes and leave single-quotes alone.</td>
            </tr>
  
           <tr>
             <td><code>ENT_QUOTES</code></td>
             <td>Will convert both double and single quotes.</td>
           </tr>
  
           <tr>
             <td><code>ENT_NOQUOTES</code></td>
             <td>Will leave both double and single quotes unconverted.</td>
           </tr>
  
           <tr>
            <td><code>ENT_IGNORE</code></td>
            <td>
              Silently discard invalid code unit sequences instead of returning
              an empty string. Using this flag is discouraged as it
              <a href="http://unicode.org/reports/tr36/#Deletion_of_Noncharacters">&raquo; may have security implications</a>.
            </td>
           </tr>
  
           <tr>
             <td><code>ENT_SUBSTITUTE</code></td>
             <td>
               Replace invalid code unit sequences with a Unicode Replacement Character
               U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.
             </td>
           </tr>
  
           <tr>
             <td><code>ENT_DISALLOWED</code></td>
             <td>
               Replace invalid code points for the given document type with a Unicode Replacement Character
               U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of leaving them as is. This may be useful,
               for instance, to ensure the well-formedness of XML documents with embedded external content.
             </td>
           </tr>
  
           <tr>
             <td><code>ENT_HTML401</code></td>
             <td>Handle code as HTML 4.01.</td>
           </tr>
  
           <tr>
             <td><code>ENT_XML1</code></td>
             <td>Handle code as XML 1.</td>
           </tr>
  
           <tr>
             <td><code>ENT_XHTML</code></td>
             <td>Handle code as XHTML.</td>
           </tr>
  
           <tr>
             <td><code>ENT_HTML5</code></td>
             <td>Handle code as HTML 5.</td>
           </tr>
          </tbody>
        </table>
      </dd>
  
      <dt>$encoding</dt>
      <dd>
        <p>An optional argument defining the encoding used when converting characters.</p>
        <p>
          If omitted, the default value of the <var>$encoding</var> varies depending on the PHP version in
          use. In PHP 5.6 and later, the <a href="ini.core.php#ini.default-charset"> default_charset</a>
          configuration option is used as the default value. PHP 5.4 and 5.5 will use <em>UTF-8</em> as the
          default. Earlier versions of PHP use <em>ISO-8859-1</em>.
        </p>
        <p>
          Although this argument is technically optional, you are highly encouraged to
          specify the correct value for your code if you are using PHP 5.5 or earlier,
          or if your <a href="ini.core.php#ini.default-charset">default_charset</a>
          configuration option may be set incorrectly for the given input.
        </p>
        <p>The following character sets are supported:</p>
        <table class="table">
          <caption><strong>Supported charsets</strong></caption>
          <thead>
            <tr>
              <th>Charset</th>
              <th>Aliases</th>
              <th>Description</th>
            </tr>
          </thead>

          <tbody>
            <tr>
              <td>ISO-8859-1</td>
              <td>ISO8859-1</td>
              <td>Western European, Latin-1.</td>
            </tr>

            <tr>
              <td>ISO-8859-5</td>
              <td>ISO8859-5</td>
              <td>Little used cyrillic charset (Latin/Cyrillic).</td>
            </tr>

            <tr>
              <td>ISO-8859-15</td>
              <td>ISO8859-15</td>
              <td>
                Western European, Latin-9. Adds the Euro sign, French and Finnish
                letters missing in Latin-1 (ISO-8859-1).
              </td>
            </tr>

            <tr>
              <td>UTF-8</td>
              <td> </td>
              <td>ASCII compatible multi-byte 8-bit Unicode.</td>
            </tr>

            <tr>
              <td>cp866</td>
              <td>ibm866, 866</td>
              <td>DOS-specific Cyrillic charset.</td>
            </tr>

            <tr>
              <td>cp1251</td>
              <td>Windows-1251, win-1251, 1251</td>
              <td>Windows-specific Cyrillic charset.</td>
            </tr>

            <tr>
              <td>cp1252</td>
              <td>Windows-1252, 1252</td>
              <td>Windows specific charset for Western European.</td>
            </tr>

            <tr>
              <td>KOI8-R</td>
              <td>koi8-ru, koi8r</td>
              <td>Russian.</td>
            </tr>

            <tr>
              <td>BIG5</td>
              <td>950</td>
              <td>Traditional Chinese, mainly used in Taiwan.</td>
            </tr>

            <tr>
              <td>GB2312</td>
              <td>936</td>
              <td>Simplified Chinese, national standard character set.</td>
            </tr>

            <tr>
              <td>BIG5-HKSCS</td>
              <td> </td>
              <td>Big5 with Hong Kong extensions, Traditional Chinese.</td>
            </tr>

            <tr>
              <td>Shift_JIS</td>
              <td>SJIS, SJIS-win, cp932, 932</td>
              <td>Japanese</td>
            </tr>

            <tr>
              <td>EUC-JP</td>
              <td>EUCJP, eucJP-win</td>
              <td>Japanese</td>
            </tr>

            <tr>
              <td>MacRoman</td>
              <td> </td>
              <td>Charset that was used by Mac OS.</td>
            </tr>

            <tr>
              <td><em>''</em></td>
              <td> </td>
              <td>
                An empty string activates detection from script encoding (Zend multibyte),
                <a href="ini.core.php#ini.default-charset">default_charset</a> and current
                locale (see <a href="function.nl-langinfo.php">nl_langinfo()</a> and
                <a href="function.setlocale.php">setlocale()</a>), in this order. Not recommended.
              </td>
            </tr>
          </tbody>
        </table>

        <blockquote>
          <strong>Note</strong>: Any other character sets are not recognized. The
          default encoding will be used instead and a warning will be emitted.
        </blockquote>
      </dd>

      <dt>$doubleEncode</dt>
      <dd>
        When it is turned off PHP will not
        encode existing html entities. The default is to convert everything.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>The encoded string.</p>
    <p>
      If <var>$scalarObject->val</var> contains an invalid code unit sequence within the
      given <var>$encoding</var> an empty string will be returned, unless either the
      <code>ENT_IGNORE</code> or <code>ENT_SUBSTITUTE</code> flags are set.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 A htmlEntitiesEncode() example</strong></p>
    <pre class="php-code">
      <?php
      $str = "A 'quote' is &lt;b>bold&lt;/b>";

      // Outputs: A 'quote' is &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;
      echo htmlEntitiesEncode($str);

      // Outputs: A &amp;#039;quote&amp;#039; is &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;
      echo htmlEntitiesEncode($str, ENT_QUOTES);
      ?>
    </pre>

    <p><strong>Example #2 Usage of <code>ENT_IGNORE</code></strong></p>
    <pre class="php-code">
      <?php
      $str = "\x8F!!!";

      // Outputs an empty string
      echo htmlEntitiesEncode($str, ENT_QUOTES, "UTF-8");

      // Outputs "!!!"
      echo htmlEntitiesEncode($str, ENT_QUOTES | ENT_IGNORE, "UTF-8");
      ?>
    </pre>
  </div>
</div>
</body>
