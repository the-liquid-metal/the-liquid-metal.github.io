<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>calc</h1>

    <div class="short-description">
        <code>calc (string <var>$operation</var>): float|int</code>
        <p>
            Calculates the sum/avg/max/min/product of values.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-sum.php">array_sum</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.max.php">max</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.min.php">min</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-product.php">array_product</a>.<br/>
        </p>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The sum of values as an integer or float.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            $a = [2, 4, 6, 8];
            sum($a); // output: 20

            $b = ["a" => 1.2, "b" => 2.3, "c" => 3.4];
            sum($b); // output: 6.9
        </pre>
    </div>

    <h2>max</h2>

    <div>
        <p>
            If the first and only parameter is an array, <strong>max()</strong>
            returns the highest value in that array. If at least two parameters are
            provided, <strong>max()</strong> returns the biggest of these values.
        </p>
        <blockquote>
            <strong>Note</strong>: Values of different types will be compared using the
            standard comparison rules. For instance, a non-numeric string will be compared
            to an integer as though it were <em>0</em>, but multiple string values will be
            compared alphanumerically. The actual value returned will be of the original
            type with no conversion applied.
        </blockquote>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>
            <strong>max()</strong> returns the parameter value considered "highest" according
            to standard comparisons. If multiple values of different types evaluate as equal (e.g.
            <em>0</em> and <em>'abc'</em>) the first provided to the function will be returned.
        </p>
    </div>

    <div class="examples">
        <pre class="php-code">
            echo max([2, 4, 5]);     // output: 5

            // With multiple arrays of different lengths, max returns the longest
            $val = max([2, 2, 2], [1, 1, 1, 1]); // output: [1, 1, 1, 1]

            // Multiple arrays of the same length are compared from left to right
            // so in our example: 2 == 2, but 5 > 4
            $val = max([2, 4, 8], [2, 5, 1]); // output: [2, 5, 1]

            // If both an array and non-array are given, the array will be returned
            // as comparisons treat arrays as greater than any other value
            $val = max("string", [2, 5, 7], 42);   // output: [2, 5, 7]
        </pre>
    </div>

    <h2>min</h2>

    <div>
        <p>
            If the first and only parameter is an array, <strong>min()</strong>
            returns the lowest value in that array. If at least two parameters are
            provided, <strong>min()</strong> returns the smallest of these values.
        </p>

        <blockquote>
            <strong>Note</strong>: Values of different types will be compared using the standard
            comparison rules. For instance, a non-numeric string will be compared to an integer
            as though it were <em>0</em>, but multiple string values will be compared alphanumerically.
            The actual value returned will be of the original type with no conversion applied.
        </blockquote>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>
            <strong>min()</strong> returns the parameter value considered "lowest" according to
            standard comparisons. If multiple values of different types evaluate as equal (e.g.
            <em>0</em> and <em>'abc'</em>) the first provided to the function will be returned.
        </p>
    </div>

    <div class="examples">
        <pre class="php-code">
            echo min([2, 4, 5]);      // output: 2

            // With multiple arrays of different lengths, min returns the shortest
            $val = min([2, 2, 2], [1, 1, 1, 1]); // output: [2, 2, 2]

            // Multiple arrays of the same length are compared from left to right
            // so in our example: 2 == 2, but 4 &lt; 5
            $val = min([2, 4, 8], [2, 5, 1]); //  output: [2, 4, 8]

            // If both an array and non-array are given, the array is never returned
            // as comparisons treat arrays as greater than any other value
            $val = min("string", [2, 5, 7], 42); // output: string
        </pre>
    </div>

    <h2>product</h2>

    <div><strong>product()</strong> returns the product of values in <var>$scalarObject->val</var>.</div>

    <div>
        <h3>Return Values</h3>
        <p>The product as an integer or float.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            $a = [2, 4, 6, 8];
            product($a); // output: 384
            product([]); // output: 1
        </pre>
    </div>
</div>
</body>
