  <h1>assocIntersect</h1>

  <div>
    <strong>assocIntersect()</strong> returns an array
    containing all the values of <code>array1</code>
    that are present in all the arguments. Note that the keys are used in
    the comparison unlike in <a href="function.array-intersect.php">array_intersect()</a>.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>array1</dt>
      <dd>The array with master values to check.</dd>

      <dt>array2</dt>
      <dd>An array to compare values against.</dd>

      <dt>...</dt>
      <dd>A variable list of arrays to compare.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns an associative array containing all the values in 
      <code>array1</code> that are present in all of the arguments.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 assocIntersect() example</strong></p>
    <pre class="php-code">
    <?php
      $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
      $array2 = array("a" => "green", "b" => "yellow", "blue", "red");
      $result_array = assocIntersect($array1, $array2);
      print_r($result_array);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre>
      Array
      (
          [a] => green
      )
    </pre>

    <p>
      In our example you see that only the pair <em>"a" => "green"</em> is present in both arrays
      and thus is returned. The value <em>"red"</em> is not returned because in <var>$array1</var>
      its key is <em>0</em> while the key of "red" in <var>$array2</var> is <em>1</em>, and the key
      <em>"b"</em> is not returned because its values are different in each array.
    </p>
    <p>
      The two values from the <em>key => value</em> pairs are considered equal only if
      <em>(string) $elem1 === (string) $elem2 </em>. In other words a strict type check is
      executed so the string representation must be the same.
    </p>
  </div>
