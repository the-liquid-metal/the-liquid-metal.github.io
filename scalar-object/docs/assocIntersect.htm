<h1>assocIntersect</h1>

 <div>
  <p>
   <strong>assocIntersect()</strong> returns an array
   containing all the values of <code>array1</code>
   that are present in all the arguments. Note that the keys are used in
   the comparison unlike in <a href="function.array-intersect.php">array_intersect()</a>.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
   <dl>
     <dt>array1</dt>
     <dd>The array with master values to check.</dd>

     <dt>array2</dt>
     <dd>An array to compare values against.</dd>

     <dt>...</dt>
     <dd>A variable list of arrays to compare.</dd>
   </dl>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns an associative array containing all the values in 
   <code>array1</code> that are present in all of the arguments.
  </p>
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 assocIntersect() example</strong></p>
    <pre><span style="color: #0000BB">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$result_array&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">assocIntersect</span><span style="color: #007700">(</span><span style="color: #0000BB">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$array2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$result_array</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></pre>

    <div>The above example will output:</div>
<pre>
Array
(
    [a] =&gt; green
)
</pre>
   </div>
  </p>
  <p>
   In our example you see that only the pair <em>&quot;a&quot; =&gt;
   &quot;green&quot;</em> is present in both arrays and thus is returned.
   The value <em>&quot;red&quot;</em> is not returned because in
   <var><var>$array1</var></var> its key is <em>0</em> while
   the key of &quot;red&quot; in <var><var>$array2</var></var> is
   <em>1</em>, and the key <em>&quot;b&quot;</em> is not returned
   because its values are different in each array.
  </p>
  <p>
   The two values from the <em>key =&gt; value</em> pairs are
   considered equal only if
   <em>(string) $elem1 === (string) $elem2 </em>. In other words
   a strict type check is executed so the string representation must be
   the same.

  </p>
 </div>
