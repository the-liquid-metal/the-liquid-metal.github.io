<h1>map</h1>

 <div>
   <strong>map()</strong> returns an array containing all
   the elements of <code>array1</code> after applying the
   <code>callback</code> function to each one.
   The number of parameters that the <code>callback</code>
   function accepts should match the number of arrays
   passed to the <strong>map()</strong>
 </div>

 <div>
  <h3>Parameters</h3>
   <dl>
     <dt>callback</dt>
     <dd>Callback function to run for each element in each array.</dd>

     <dt>array1</dt>
     <dd>An array to run through the <code>callback</code> function.</dd>

     <dt>...</dt>
     <dd>Variable list of array arguments to run through the <code>callback</code> function.</dd>
   </dl>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns an array containing all the elements of <code>array1</code>
   after applying the <code>callback</code> function to each one.
  </p>
 </div>

 <div class="examples">
    <p><strong>Example #1 map() example</strong></p>
<pre class="php-code">
<?php
function cube($n)
{
    return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = map("cube", $a);
print_r($b);
?>
</pre>
    <div>This makes <var>$b</var> have:</div>
<pre class="output">
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
</pre>

    <p><strong>Example #2 map() using a lambda function (as of PHP 5.3.0)</strong></p>
<pre class="php-code">
<?php
$func = function($value) {
    return $value * 2;
};

print_r(map($func, range(1, 5)));
?>
</pre>
<pre class="output">
Array
(
    [0] => 2
    [1] => 4
    [2] => 6
    [3] => 8
    [4] => 10
)
</pre>

    <p><strong>Example #3 map() - using more arrays</strong></p>
<pre class="php-code">
<?php
function show_Spanish($n, $m)
{
    return("The number $n is called $m in Spanish");
}

function map_Spanish($n, $m)
{
    return(array($n => $m));
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = map("show_Spanish", $a, $b);
print_r($c);

$d = map("map_Spanish", $a , $b);
print_r($d);
?>
</pre>
    <div>The above example will output:</div>
<pre class="output">
// printout of $c
Array
(
    [0] => The number 1 is called uno in Spanish
    [1] => The number 2 is called dos in Spanish
    [2] => The number 3 is called tres in Spanish
    [3] => The number 4 is called cuatro in Spanish
    [4] => The number 5 is called cinco in Spanish
)

// printout of $d
Array
(
    [0] => Array
        (
            [1] => uno
        )
    [1] => Array
        (
            [2] => dos
        )
    [2] => Array
        (
            [3] => tres
        )
    [3] => Array
        (
            [4] => cuatro
        )
    [4] => Array
        (
            [5] => cinco
        )
)
</pre>

  <p>
   Usually when using two or more arrays, they should be of equal length
   because the callback function is applied in parallel to the corresponding
   elements.
   If the arrays are of unequal length, shorter ones will be extended with empty
   elements to match the length of the longest.
  </p>

  <p>
   An interesting use of this function is to construct an array of arrays,
   which can be easily performed by using <code>NULL</code>
   as the name of the callback function
  </p>

    <p><strong>Example #4 Creating an array of arrays</strong></p>
<pre class="php-code">
<?php
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = map(null, $a, $b, $c);
print_r($d);
?>
</pre>
    <div>The above example will output:</div>
<pre class="output">
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => uno
        )
    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => dos
        )
    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => tres
        )
    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => cuatro
        )
    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => cinco
        )
)
</pre>

  <p>
   If the array argument contains string keys then the returned array
   will contain string keys if and only if exactly one array is passed. If 
   more than one argument is passed then the returned array always has 
   integer keys.
  </p>

    <p><strong>Example #5 map() - with string keys</strong></p>
<pre class="php-code">
<?php
$arr = array("stringkey" => "value");
function cb1($a) {
    return array ($a);
}
function cb2($a, $b) {
    return array ($a, $b);
}
var_dump(map("cb1", $arr));
var_dump(map("cb2", $arr, $arr));
var_dump(map(null,  $arr));
var_dump(map(null, $arr, $arr));
?>
</pre>
    <div>The above example will output:</div>
<pre class="output">
array(1) {
  ["stringkey"]=>
  array(1) {
    [0]=>
    string(5) "value"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
array(1) {
  ["stringkey"]=>
  string(5) "value"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "value"
    [1]=>
    string(5) "value"
  }
}
</pre>
 </div>
