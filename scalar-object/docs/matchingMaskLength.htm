
 <div class="refnamediv">
  <h1 class="refname">matchingMaskLength</h1>
 </div>
 
 <div class="refsect1 description">
  <p class="para rdfs-comment">
   Finds the length of the initial segment of <code class="parameter">subject</code>
   that contains <em>only</em> characters from <code class="parameter">mask</code>.
  </p>
  <p>
   If <code class="parameter">start</code> and <code class="parameter">length</code>
   are omitted, then all of <code class="parameter">subject</code> will be
   examined. If they are included, then the effect will be the same as
   calling <em>matchingMaskLength(substr($subject, $start, $length),
   $mask)</em> (see <a href="function.substr.php" class="xref">substr</a>
   for more information).
  </p>
  <p>
   The line of code:
   <div class="informalexample">
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">matchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">"42&nbsp;is&nbsp;the&nbsp;answer&nbsp;to&nbsp;the&nbsp;128th&nbsp;question."</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"1234567890"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

   </div>
   will assign <em>2</em> to <var class="varname"><var class="varname">$var</var></var>,
   because the string &quot;42&quot; is the initial segment
   of <code class="parameter">subject</code> that consists only of characters
   contained within &quot;1234567890&quot;.
  </p>
 </div>


 <div class="refsect1 parameters">
  <h3 class="title">Parameters</h3>
  <p>
   <dl>

    
     <dt>
<code class="parameter">subject</code></dt>

     <dd>

      <p>
       The string to examine.
      </p>
     </dd>

    
    
     <dt>
<code class="parameter">mask</code></dt>

     <dd>

      <p>
       The list of allowable characters.
      </p>
     </dd>

    
    
     <dt>
<code class="parameter">start</code></dt>

     <dd>

      <p>
       The position in <code class="parameter">subject</code> to
       start searching.
      </p>
      <p>
       If <code class="parameter">start</code> is given and is non-negative,
       then <span><strong>matchingMaskLength()</strong></span> will begin
       examining <code class="parameter">subject</code> at
       the <code class="parameter">start</code>&#039;th position. For instance, in
       the string &#039;<em>abcdef</em>&#039;, the character at
       position <em>0</em> is &#039;<em>a</em>&#039;, the
       character at position <em>2</em> is
       &#039;<em>c</em>&#039;, and so forth.
      </p>
      <p>
       If <code class="parameter">start</code> is given and is negative,
       then <span><strong>matchingMaskLength()</strong></span> will begin
       examining <code class="parameter">subject</code> at
       the <code class="parameter">start</code>&#039;th position from the end
       of <code class="parameter">subject</code>.
      </p>
     </dd>

    
    
     <dt>
<code class="parameter">length</code></dt>

     <dd>

      <p>
       The length of the segment from <code class="parameter">subject</code>
       to examine. 
      </p>
      <p>
       If <code class="parameter">length</code> is given and is non-negative,
       then <code class="parameter">subject</code> will be examined
       for <code class="parameter">length</code> characters after the starting
       position.
      </p>
      <p>
        If <code class="parameter">length</code> is given and is negative,
        then <code class="parameter">subject</code> will be examined from the
        starting position up to <code class="parameter">length</code>
        characters from the end of <code class="parameter">subject</code>.
      </p>
     </dd>

    
   </dl>

  </p>
 </div>


 <div class="refsect1 returnvalues">
  <h3 class="title">Return Values</h3>
  <p>
   Returns the length of the initial segment of <code class="parameter">subject</code>
   which consists entirely of characters in <code class="parameter">mask</code>.
  </p>
  <blockquote><p><strong>Note</strong>: 
   <p>
    When a <code class="parameter">start</code> parameter is set, the returned length
    is counted starting from this position, not from the beginning of
    <code class="parameter">subject</code>.
   </p>
  </p></blockquote>
 </div>


 <div class="refsect1 examples">
  <p>
   <div>
    <p><strong>Example #1 <span><strong>matchingMaskLength()</strong></span> example</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;subject&nbsp;does&nbsp;not&nbsp;start&nbsp;with&nbsp;any&nbsp;characters&nbsp;from&nbsp;mask<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">matchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"o"</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;examine&nbsp;two&nbsp;characters&nbsp;from&nbsp;subject&nbsp;starting&nbsp;at&nbsp;offset&nbsp;1<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">matchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"o"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;examine&nbsp;one&nbsp;character&nbsp;from&nbsp;subject&nbsp;starting&nbsp;at&nbsp;offset&nbsp;1<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">matchingMaskLength</span><span style="color: #007700">(</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"o"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">));<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
int(0)
int(2)
int(1)
</pre></div>
    </div>
   </div>
  </p>
 </div>


 <div>
  <blockquote><p><strong>Note</strong>: <span>This function is
binary-safe.</span></p></blockquote>
 </div>
