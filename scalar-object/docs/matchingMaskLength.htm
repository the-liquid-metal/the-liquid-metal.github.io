<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>matchingMaskLength( string <var>$mask</var>, int <var>$start</var> = null, integer <var>$length</var> = null ): int</code>
  <p>
    Context: string.<br/>
    Alias of <a href="http://php.net/manual/en/function.strspn.php">strspn</a>.<br/>
    Find the length of initial segment matching the mask.
  </p>
</div>
<div class="ajax-area">
  <h1>matchingMaskLength</h1>

  <div>
    <p>
      Finds the length of the initial segment of <var>$scalarObject->val</var>
      that contains <em>only</em> characters from <var>$mask</var>.
    </p>
    <p>
      If <var>$start</var> and <var>$length</var> are omitted, then all of
      <var>$scalarObject->val</var> will be examined. If they are included, then the
      effect will be the same as calling <em>matchingMaskLength(substr($subject,
      $start, $length), $mask)</em> (see <a href="substrAt.htm">substrAt</a>
      for more information).
    </p>
    <p>The line of code:</p>
    <pre class="php-code">
      <?php
      $var = matchingMaskLength("42 is the answer to the 128th question.", "1234567890");
      ?>
    </pre>
    <p>
      will assign <em>2</em> to <var>$var</var>, because the string "42" is the initial segment
      of <var>$scalarObject->val</var> that consists only of characters contained within "1234567890".
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$mask</dt>
      <dd>The list of allowable characters.</dd>

      <dt>$start</dt>
      <dd>
        <p>The position in <var>$scalarObject->val</var> to start searching.</p>
        <p>
          If it is given and is non-negative, then <strong>matchingMaskLength()</strong> will
          begin examining <var>$scalarObject->val</var> at the <var>$start</var>'th position. For
          instance, in the string '<em>abcdef</em>', the character at position <em>0</em> is
          '<em>a</em>', the character at position <em>2</em> is '<em>c</em>', and so forth.
        </p>
        <p>
          If it is given and is negative, then <strong>matchingMaskLength()</strong> will begin
          examining <var>$scalarObject->val</var> at the <var>$start</var>'th position from the
          end of <var>$scalarObject->val</var>.
        </p>
      </dd>

      <dt>$length</dt>
      <dd>
        <p>The length of the segment from <var>$scalarObject->val</var> to examine.</p>
        <p>
          If it is given and is non-negative, then <var>$scalarObject->val</var> will
          be examined for <var>$length</var> characters after the starting position.
        </p>
        <p>
          If it is given and is negative, then <var>$scalarObject->val</var> will be
          examined from the starting position up to <var>$length</var> characters from the
          end of <var>$scalarObject->val</var>.
        </p>
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the length of the initial segment of <var>$scalarObject->val</var>
      which consists entirely of characters in <var>$mask</var>.
    </p>

    <blockquote>
      <strong>Note</strong>: When a <var>$start</var> parameter is set, the
      returned length is counted starting from this position, not from the
      beginning of <var>$scalarObject->val</var>.
     </blockquote>
  </div>

  <div class="examples">
    <p><strong>Example #1 matchingMaskLength() example</strong></p>
    <pre class="php-code">
      <?php
      // subject does not start with any characters from mask
      var_dump(matchingMaskLength("foo", "o"));

      // examine two characters from subject starting at offset 1
      var_dump(matchingMaskLength("foo", "o", 1, 2));

      // examine one character from subject starting at offset 1
      var_dump(matchingMaskLength("foo", "o", 1, 1));
      ?>
    </pre>
    <div>The above example will output:</div>
    <pre class="output">
      int(0)
      int(2)
      int(1)
    </pre>
  </div>

  <blockquote><strong>Note</strong>: This function is binary-safe.</blockquote>
</div>
</body>
