  <h1>merge</h1>
  <div>
    <p>
      Merges the elements of one or more arrays together so that the values of one
      are appended to the end of the previous one. It returns the resulting array.
    </p>
    <p>
      If the input arrays have the same string keys, then the later value for that key
      will overwrite the previous one.  If, however, the arrays contain numeric keys,
      the later value will <em>not</em> overwrite the original value, but will be appended.
    </p>
    <p>
      Values in the input array with numeric keys will be renumbered with
      incrementing keys starting from zero in the result array.
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>array1</dt>
      <dd>Initial array to merge.</dd>

      <dt>...</dt>
      <dd>Variable list of arrays to merge.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns the resulting array.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 merge() example</strong></p>
    <pre class="php-code">
      <?php
      $array1 = array("color" => "red", 2, 4);
      $array2 = array("a", "b", "color" => "green", "shape" => "trapezoid", 4);
      $result = merge($array1, $array2);
      print_r($result);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [color] => green
          [0] => 2
          [1] => 4
          [2] => a
          [3] => b
          [shape] => trapezoid
          [4] => 4
      )
    </pre>

    <p><strong>Example #2 Simple merge() example</strong></p>
    <pre class="php-code">
      <?php
      $array1 = array();
      $array2 = array(1 => "data");
      $result = merge($array1, $array2);
      ?>
    </pre>

    <div>Don't forget that numeric keys will be renumbered!</div>
    <pre class="output">
      Array
      (
          [0] => data
      )
    </pre>

    <div>
      If you want to append array elements from the second array to the
      first array while not overwriting the elements from the first
      array and not re-indexing, use the <em>+</em> array union operator:
    </div>
    <pre class="php-code">
      <?php
      $array1 = array(0 => 'zero_a', 2 => 'two_a', 3 => 'three_a');
      $array2 = array(1 => 'one_b', 3 => 'three_b', 4 => 'four_b');
      $result = $array1 + $array2;
      var_dump($result);
      ?>
    </pre>

    <div>
      The keys from the first array will be preserved. If an array key exists
      in both arrays, then the element from the first array will be used and
      the matching key's element from the second array will be ignored.
    </div>
    <pre class="output">
      array(5) {
        [0]=>
        string(6) "zero_a"
        [2]=>
        string(5) "two_a"
        [3]=>
        string(7) "three_a"
        [1]=>
        string(5) "one_b"
        [4]=>
        string(6) "four_b"
      }
    </pre>

    <p><strong>Example #3 merge() with non-array types</strong></p>
    <pre class="php-code">
      <?php
      $beginning = 'foo';
      $end = array(1 => 'bar');
      $result = merge((array)$beginning, (array)$end);
      print_r($result);
      ?>
    </pre>
    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [0] => foo
          [1] => bar
      )
    </pre>
  </div>
