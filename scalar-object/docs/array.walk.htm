<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>walk</h1>

  <div class="short-description">
    <code>walk( callable <var>$callback</var>, mixed <var>$userData</var> = NULL ): $array</code>
    <p>
      Context: array.<br/>
      Alias of <a href="http://php.net/manual/en/function.array-walk.php">array_walk</a>.<br/>
      Apply a callback function to every elements.
    </p>
  </div>

  <div>
    <p>
      Applies the user-defined <var>$callback</var> function to each
      element of the <var>$scalarObject->val</var>.
    </p>
    <!-- pointer is not relevant -->
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$callback</dt>
      <dd>
        <p>
          Typically, <var>$callback</var> takes on two parameters. The
          <var>$scalarObject->val</var> parameter's value being the first, and the
          key/index second.
        </p>
        <blockquote>
          <strong>Note</strong>: If <var>$callback</var> needs to be working with the
          actual values of the array, specify the first parameter of <var>$callback</var>
          as a reference. Then, any changes made to those elements will be made in the
          original array itself.
        </blockquote>
        <blockquote>
          <strong>Note</strong>: Many internal functions (for example
          <a href="lowercase.htm">lowercase()</a>) will throw a warning
          if more than the expected number of argument are passed in and are not
          usable directly as a <var>$callback</var>.
        </blockquote>
        <p>
          Only the values of the <var>$scalarObject->val</var> may potentially be
          changed; its structure cannot be altered, i.e., the programmer cannot
          add, unset or reorder elements. If the callback does not respect this
          requirement, the behavior of this function is undefined, and      
          unpredictable.
        </p>
      </dd>
  
      <dt>$userdata</dt>
      <dd>
        If the optional <var>$userdata</var> parameter is supplied, it will
        be passed as the third parameter to the <var>$callback</var>.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p><code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
  </div>

  <div>
    <h3>Errors/Exceptions</h3>
    <p>
      If function <var>$callback</var> requires more parameters than
      given to it, an error of level <a href="errorfunc.constants.php">
      E_WARNING</a> will be generated each time <strong>walk()</strong>
      calls <var>$callback</var>.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 walk() example</strong></p>
    <pre class="php-code">
      <?php
      $fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" => "apple");
  
      function test_alter(&amp;$item1, $key, $prefix)
      {
          $item1 = "$prefix: $item1";
      }

      function test_print($item2, $key)
      {
          echo "$key. $item2&lt;br />\n";
      }

      echo "Before ...:\n";
      walk($fruits, 'test_print');

      walk($fruits, 'test_alter', 'fruit');
      echo "... and after:\n";

      walk($fruits, 'test_print');
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Before ...:
      d. lemon
      a. orange
      b. banana
      c. apple
      ... and after:
      d. fruit: lemon
      a. fruit: orange
      b. fruit: banana
      c. fruit: apple
    </pre>
  </div>
</div>
</body>
