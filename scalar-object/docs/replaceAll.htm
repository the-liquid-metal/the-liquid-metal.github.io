<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">

</div>
<div class="ajax-area">
  <h1>replaceAll</h1>

  <div>
    <p>
      This function returns a string or an array with all occurrences of <code>search</code>
      in <code>subject</code> replaced with the given <code>replace</code> value.
    </p>
    <p>
      If you don't need fancy replacing rules (like regular expressions), you should always
      use this function instead of <a href="function.preg-replace.php">preg_replace()</a>.
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <p>
      If <code>search</code> and <code>replace</code> are arrays, then <strong>replaceAll()</strong>
      takes a value from each array and uses them to search and replace on <code>subject</code>. If
      <code>replace</code> has fewer values than <code>search</code>, then an empty string is used
      for the rest of replacement values. If <code>search</code> is an array and <code>replace</code>
      is a string, then this replacement string is used for every value of <code>search</code>. The
      converse would not make sense, though.
    </p>
    <p>
      If <code>search</code> or <code>replace</code>
      are arrays, their elements are processed first to last.
    </p>

    <dl>
      <dt>search</dt>
      <dd>
        The value being searched for, otherwise known as the <em>needle</em>.
        An array may be used to designate multiple needles.
      </dd>

      <dt>replace</dt>
      <dd>
        The replacement value that replaces found <code>search</code>
        values. An array may be used to designate multiple replacements.
      </dd>

      <dt>subject</dt>
      <dd>
        <p>
          The string or array being searched and replaced on,
          otherwise known as the <em>haystack</em>.
        </p>
        <p>
          If <code>subject</code> is an array, then the search and
          replace is performed with every entry of <code>subject</code>,
          and the return value is an array as well.
        </p>
      </dd>
    
      <dt>count</dt>
      <dd>If passed, this will be set to the number of replacements performed.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>This function returns a string or an array with the replaced values.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 Basic replaceAll() examples</strong></p>
    <pre class="php-code">
      <?php
      // Provides: &lt;body text='black'>
      $bodytag = replaceAll("%body%", "black", "&lt;body text='%body%'>");

      // Provides: Hll Wrld f PHP
      $vowels = array("a", "e", "i", "o", "u", "A", "E", "I", "O", "U");
      $onlyconsonants = replaceAll($vowels, "", "Hello World of PHP");

      // Provides: You should eat pizza, beer, and ice cream every day
      $phrase  = "You should eat fruits, vegetables, and fiber every day.";
      $healthy = array("fruits", "vegetables", "fiber");
      $yummy   = array("pizza", "beer", "ice cream");

      $newphrase = replaceAll($healthy, $yummy, $phrase);

      // Provides: 2
      $str = replaceAll("ll", "", "good golly miss molly!", $count);
      echo $count;
      ?>
    </pre>

    <p><strong>Example #2 Examples of potential replaceAll() gotchas</strong></p>
    <pre class="php-code">
      <?php
      // Order of replacement
      $str     = "Line 1\nLine 2\rLine 3\r\nLine 4\n";
      $order   = array("\r\n", "\n", "\r");
      $replace = '&lt;br />';

      // Processes \r\n's first so they aren't converted twice.
      $newstr = replaceAll($order, $replace, $str);

      // Outputs F because A is replaced with B, then B is replaced with C, and so on...
      // Finally E is replaced with F, because of left to right replacements.
      $search  = array('A', 'B', 'C', 'D', 'E');
      $replace = array('B', 'C', 'D', 'E', 'F');
      $subject = 'A';
      echo replaceAll($search, $replace, $subject);

      // Outputs: apearpearle pear
      // For the same reason mentioned above
      $letters = array('a', 'p');
      $fruit   = array('apple', 'pear');
      $text    = 'a p';
      $output  = replaceAll($letters, $fruit, $text);
      echo $output;
      ?>
    </pre>
  </div>

  <blockquote><strong>Note</strong>:This function is binary-safe.</blockquote>

  <div class="caution">
    <strong>Caution</strong><br/>
    <strong>Replacement order gotcha</strong><br/>
    Because <strong>replaceAll()</strong> replaces left to right, it might
    replace a previously inserted value when doing multiple replacements.
    See also the examples in this document.
  </div>

  <blockquote><strong>Note</strong>:
    This function is case-sensitive. Use <a href="function.str-ireplace.php">str_ireplace()</a>
    for case-insensitive replace.
  </blockquote>
</div>
</body>
