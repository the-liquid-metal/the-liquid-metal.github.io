<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>combine</h1>

    <div class="short-description">
        <code>combine (int <var>$role</var> = BaseArray::COMBINE_AS_KEY, iterable <var>$values</var>): ScalarArray|ObjectArray</code>
        <p>
            Creates array using one array for keys and another for its values.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-combine.php">array_combine</a>.<br/>
        </p>
    </div>

    <div>
        Creates an array by using the
        values from the <em>internal array</em> array as keys and the values from the
        <var>$values</var> array as the corresponding values.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$values</dt>
        <dd>Array of values to be used</dd>
    </dl>

    <h3>Return Values</h3>
    <p>The combined array.</p>

    <h3>Errors/Exceptions</h3>
    <p>
        Throws <code>E_WARNING</code> if the number of elements in
        <em>internal array</em> and <var>$values</var> does not match.
    </p>

    <pre class="php-code">
        $arr1 = ["green",   "red",   "yellow"];
        $arr2 = ["avocado", "apple", "banana"];
        $sa = new ScalarArray("string", false, $arr1);
        $sa->combine(COMBINE_AS_KEY, $arr2);   // output: ["green" => "avocado", "red" => "apple", "yellow" => "banana"]
        $sa->combine(COMBINE_AS_VALUE, $arr2); // output: ["avocado" => "green", "apple" => "red", "banana" => "yellow"]
    </pre>
</div>
</body>
