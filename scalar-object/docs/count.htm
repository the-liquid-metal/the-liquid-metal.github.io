<h1>count</h1>
 <div>
  <p>Counts all elements in an array, or something in an object.</p>
  <p>
   For objects, if you have
   <a href="ref.spl.php">SPL</a> installed, you can hook into
   <strong>count()</strong> by implementing interface
   <a href="class.countable.php">Countable</a>. The interface has exactly one method,
   <a href="countable.count.php">Countable::count()</a>, which returns the return value for the
   <strong>count()</strong> function.
  </p>
  <p>
   Please see the <a href="language.types.array.php">Array</a>
   section of the manual for a detailed explanation of how arrays
   are implemented and used in PHP.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
   <dl>
     <dt>array_or_countable</dt>
     <dd>An array or <a href="class.countable.php">Countable</a> object.</dd>

     <dt>mode</dt>
     <dd><p>If the optional <code>mode</code> parameter is set to
       <code>COUNT_RECURSIVE</code> (or 1), <strong>count()</strong>
       will recursively count the array.  This is particularly useful for
       counting all the elements of a multidimensional array.
      </p>
      <div class="caution"><strong>Caution</strong>
       <p>
        <strong>count()</strong> can detect recursion to avoid an infinite
        loop, but will emit an <code>E_WARNING</code> every time it
        does (in case the array contains itself more than once) and return a
        count higher than may be expected.
       </p>
      </div>
     </dd>
   </dl>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns the number of elements in <code>array_or_countable</code>.
   If the parameter is not an array or not an object with
   implemented <a href="class.countable.php">Countable</a> interface,
   <em>1</em> will be returned.
   There is one exception, if <code>array_or_countable</code> is <code>NULL</code>,
   <em>0</em> will be returned.
  </p>
  <div class="caution"><strong>Caution</strong>
   <p>
    <strong>count()</strong> may return 0 for a variable that isn't set,
    but it may also return 0 for a variable that has been initialized with an
    empty array. Use <a href="function.isset.php">isset()</a> to test if a variable is set.
   </p>
  </div>
 </div>

 <div class="examples">
    <p><strong>Example #1 count() example</strong></p>
<pre class="php-code">
<?php
$a[0] = 1;
$a[1] = 3;
$a[2] = 5;
$result = count($a);
// $result == 3

$b[0]  = 7;
$b[5]  = 9;
$b[10] = 11;
$result = count($b);
// $result == 3

$result = count(null);
// $result == 0

$result = count(false);
// $result == 1
?>
</pre>

    <p><strong>Example #2 Recursive count() example</strong></p>
<pre class="php-code">
<?php
$food = array('fruits' => array('orange', 'banana', 'apple'),
              'veggie' => array('carrot', 'collard', 'pea'));

// recursive count
echo count($food, COUNT_RECURSIVE); // output 8

// normal count
echo count($food); // output 2

?>
</pre>
 </div>
