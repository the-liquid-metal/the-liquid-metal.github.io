<h1>multisort</h1>
 <div>
  <p>
   <span><strong>multisort()</strong></span> can be used to sort several
   arrays at once, or a multi-dimensional array by one or more
   dimensions.
  </p>
  <p>
   Associative (<span><a href="language.types.string.php" class="type string">string</a></span>) keys will be maintained, but numeric
   keys will be re-indexed.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
  <p>
   <dl>
     <dt><code>array1</code></dt>
     <dd><p>An <span><a href="language.types.array.php">array</a></span> being sorted.</p></dd>

     <dt><code>array1_sort_order</code></dt>
     <dd><p>The order used to sort the previous <span><a href="language.types.array.php">array</a></span> argument. Either
       <strong><code>SORT_ASC</code></strong> to sort ascendingly or <strong><code>SORT_DESC</code></strong>
       to sort descendingly.
      </p>
      <p>
       This argument can be swapped with <code>array1_sort_flags</code>
       or omitted entirely, in which case <strong><code>SORT_ASC</code></strong> is assumed.</p></dd>

     <dt><code>array1_sort_flags</code></dt>
     <dd><p>Sort options for the previous <span><a href="language.types.array.php">array</a></span> argument:
      </p>
      <p>
       Sorting type flags:
       <ul class="itemizedlist">
        <li class="listitem">
         <span><strong><code>SORT_REGULAR</code></strong> - compare items normally
         (don&#039;t change types)</span>
        </li>
        <li class="listitem">
         <span><strong><code>SORT_NUMERIC</code></strong> - compare items numerically</span>
        </li>
        <li class="listitem">
         <span><strong><code>SORT_STRING</code></strong> - compare items as strings</span>
        </li>
        <li class="listitem">
         <span>
          <strong><code>SORT_LOCALE_STRING</code></strong> - compare items as
          strings, based on the current locale. It uses the locale,
          which can be changed using <span><a href="function.setlocale.php">setlocale()</a></span>
         </span>
        </li>
        <li class="listitem">
         <span>
          <strong><code>SORT_NATURAL</code></strong> - compare items as strings
          using &quot;natural ordering&quot; like <span><a href="function.natsort.php">natsort()</a></span>
         </span>
        </li>
        <li class="listitem">
         <span>
          <strong><code>SORT_FLAG_CASE</code></strong> - can be combined
          (bitwise OR) with
          <strong><code>SORT_STRING</code></strong> or
          <strong><code>SORT_NATURAL</code></strong> to sort strings case-insensitively
         </span>
        </li>
       </ul>
      </p>
      <p>
       This argument can be swapped with <code>array1_sort_order</code>
       or omitted entirely, in which case <strong><code>SORT_REGULAR</code></strong> is assumed.</p></dd>

     <dt><code>...</code></dt>
     <dd><p>More arrays, optionally followed by sort order and flags. Only elements
       corresponding to equivalent elements in previous arrays are compared.
       In other words, the sort is lexicographical.</p></dd>
   </dl>
  </p>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns <strong><code>TRUE</code></strong> on success or <strong><code>FALSE</code></strong> on failure.
  </p>
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 Sorting multiple arrays</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$ar1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">10</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">0</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$ar2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">3</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">4</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">multisort</span><span style="color: #007700">(</span><span style="color: #0000BB">$ar1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$ar2</span><span style="color: #007700">);<br /><br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$ar1</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$ar2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>
     In this example, after sorting, the first array will contain 0,
     10, 100, 100. The second array will contain 4, 1, 2, 3. The
     entries in the second array corresponding to the identical
     entries in the first array (100 and 100) were sorted as well.
    </p></div>
    <div>
<div><pre>
array(4) {
  [0]=&gt; int(0)
  [1]=&gt; int(10)
  [2]=&gt; int(100)
  [3]=&gt; int(100)
}
array(4) {
  [0]=&gt; int(4)
  [1]=&gt; int(1)
  [2]=&gt; int(2)
  [3]=&gt; int(3)
}
</pre></div>
    </div>
   </div>
  </p>
  <p>
   <div>
    <p><strong>Example #2 Sorting multi-dimensional array</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$ar&nbsp;</span><span style="color: #007700">=&nbsp;array(<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(</span><span style="color: #DD0000">"10"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">11</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">100</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"a"</span><span style="color: #007700">),<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array(&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"2"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">3</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);<br /></span><span style="color: #0000BB">multisort</span><span style="color: #007700">(</span><span style="color: #0000BB">$ar</span><span style="color: #007700">[</span><span style="color: #0000BB">0</span><span style="color: #007700">],&nbsp;</span><span style="color: #0000BB">SORT_ASC</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">SORT_STRING</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$ar</span><span style="color: #007700">[</span><span style="color: #0000BB">1</span><span style="color: #007700">],&nbsp;</span><span style="color: #0000BB">SORT_NUMERIC</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">SORT_DESC</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$ar</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>
     In this example, after sorting, the first array will transform to
     &quot;10&quot;, 100, 100, 11, &quot;a&quot; (it was sorted as strings in ascending
     order). The second will contain 1, 3, &quot;2&quot;, 2, 1 (sorted as numbers,
     in descending order).
    </p></div>
    <div>
<div><pre>
array(2) {
  [0]=&gt; array(5) {
    [0]=&gt; string(2) &quot;10&quot;
    [1]=&gt; int(100)
    [2]=&gt; int(100)
    [3]=&gt; int(11)
    [4]=&gt; string(1) &quot;a&quot;
  }
  [1]=&gt; array(5) {
    [0]=&gt; int(1)
    [1]=&gt; int(3)
    [2]=&gt; string(1) &quot;2&quot;
    [3]=&gt; int(2)
    [4]=&gt; int(1)
  }
}
</pre></div>
    </div>
   </div>
  </p>
  <p>
   <div>
    <p><strong>Example #3 Sorting database results</strong></p>
    <div><p>
     For this example, each element in the <var><var>data</var></var>
     array represents one row in a table. This type of dataset is typical
     of database records.
    </p></div>
    <div><p>
     Example data:
    </p></div>
    <div>
<div><pre>
volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
</pre></div>
    </div>
    <div><p>
     The data as an array, called <var><var>data</var></var>. This would usually,
     for example, be obtained by looping with <span><a href="function.mysql-fetch-assoc.php">mysql_fetch_assoc()</a></span>.
    </p></div>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">67</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">86</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">85</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">6</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">98</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">86</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">6</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$data</span><span style="color: #007700">[]&nbsp;=&nbsp;array(</span><span style="color: #DD0000">'volume'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">67</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'edition'&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">7</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>
     In this example, we will order by <var><var>volume</var></var> descending,
     <var><var>edition</var></var> ascending.
    </p></div>
    <div><p>
     We have an array of rows, but <span><strong>multisort()</strong></span>
     requires an array of columns, so we use the below code to obtain the
     columns, then perform the sorting.
    </p></div>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Obtain&nbsp;a&nbsp;list&nbsp;of&nbsp;columns<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #0000BB">$data&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #0000BB">$key&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #0000BB">$row</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$volume</span><span style="color: #007700">[</span><span style="color: #0000BB">$key</span><span style="color: #007700">]&nbsp;&nbsp;=&nbsp;</span><span style="color: #0000BB">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'volume'</span><span style="color: #007700">];<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$edition</span><span style="color: #007700">[</span><span style="color: #0000BB">$key</span><span style="color: #007700">]&nbsp;=&nbsp;</span><span style="color: #0000BB">$row</span><span style="color: #007700">[</span><span style="color: #DD0000">'edition'</span><span style="color: #007700">];<br />}<br /><br /></span><span style="color: #FF8000">//&nbsp;Sort&nbsp;the&nbsp;data&nbsp;with&nbsp;volume&nbsp;descending,&nbsp;edition&nbsp;ascending<br />//&nbsp;Add&nbsp;$data&nbsp;as&nbsp;the&nbsp;last&nbsp;parameter,&nbsp;to&nbsp;sort&nbsp;by&nbsp;the&nbsp;common&nbsp;key<br /></span><span style="color: #0000BB">multisort</span><span style="color: #007700">(</span><span style="color: #0000BB">$volume</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">SORT_DESC</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$edition</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">SORT_ASC</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$data</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>
     The dataset is now sorted, and will look like this:
    </p></div>
    <div>
<div><pre>
volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
</pre></div>
    </div>
   </div>
  </p>
  <p>
   <div>
    <p><strong>Example #4 Case insensitive sorting</strong></p>
    <div><p>
     Both <strong><code>SORT_STRING</code></strong> and
     <strong><code>SORT_REGULAR</code></strong> are case sensitive, strings
     starting with a capital letter will come before strings starting
     with a lowercase letter.
    </p></div>
    <div><p>
     To perform a case insensitive search, force the sorting order to be
     determined by a lowercase copy of the original array.
    </p></div>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$array&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'Alpha'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'atomic'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'Beta'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'bank'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$array_lowercase&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">array_map</span><span style="color: #007700">(</span><span style="color: #DD0000">'strtolower'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #0000BB">multisort</span><span style="color: #007700">(</span><span style="color: #0000BB">$array_lowercase</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">SORT_ASC</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">SORT_STRING</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br /><br /></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$array</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
Array
(
    [0] =&gt; Alpha
    [1] =&gt; atomic
    [2] =&gt; bank
    [3] =&gt; Beta
)
</pre></div>
    </div>
   </div>
  </p>
 </div>
