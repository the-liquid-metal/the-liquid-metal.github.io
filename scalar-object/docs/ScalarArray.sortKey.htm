<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>sortKey</h1>

    <div class="short-description">
        <code>sortKey (callable <var>$sorter</var> = null, bool <var>$reverse</var> = false, bool <var>$insensitive</var> = false): static</code>
        <p>
            Sort and/or reverse keys.<br/><br/>
            see <a target="_blank" href="https://www.php.net/manual/en/function.uksort.php">uksort</a>&nbsp;
            <a target="_blank" href="https://www.php.net/manual/en/function.ksort.php">ksort</a>&nbsp;
            <a target="_blank" href="https://www.php.net/manual/en/function.krsort.php">krsort</a>&nbsp;
            <a target="_blank" href="https://www.php.net/manual/en/function.array-reverse.php">array_reverse</a>.<br/>
        </p>
    </div>

    <div>
        <strong>userKeySort()</strong> will sort the keys of <var>$scalarObject->val</var> using a user-supplied comparison
        function.  If the <var>$scalarObject->val</var> you wish to sort needs to be sorted by some non-trivial criteria, you
        should use this function.
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$keyComparator</dt>
            <dd>
                The comparison function must return an integer less than, equal to, or greater than zero if the
                first argument is considered to be respectively less than, equal to, or greater than the second.
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>Returns <code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            function cmp($a, $b) {
                $a = preg_replace("@^(a|an|the) @", "", $a);
                $b = preg_replace("@^(a|an|the) @", "", $b);
                return strcasecmp($a, $b);
            }

            $array = ["John" => 1, "the Earth" => 2, "an apple" => 3, "a banana" => 4];
            userKeySort($array, "cmp"); // output: ["an apple" => 3, "a banana" => 4, "the Earth" => 2, "John" => 1]
        </pre>
    </div>

    <h2>keySort</h2>

    <div>
        Sorts <var>$scalarObject->val</var> by key, maintaining key to data correlations. This is
        useful mainly for associative arrays.
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$flags</dt>
            <dd>For details see <a href="sort.htm">sort()</a>.</dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p><code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            $fruits = ["d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple"];
            keySort($fruits); // output: ["a" => "orange", "b" => "banana", "c" => "apple", "d" => "lemon"]
        </pre>
    </div>

    <h2>reverseKeySort</h2>

    <div>
        Sorts <var>$scalarObject->val</var> by key in reverse order, maintaining key to data
        correlations. This is useful mainly for associative arrays.
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$flags</dt>
            <dd>For details see <a href="sort.htm">sort()</a>.</dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>Returns <code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            $fruits = ["d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple"];
            reverseKeySort($fruits); // output: ["d" => "lemon", "c" => "apple", "b" => "banana", "a" => "orange"]
        </pre>
    </div>

    <h2>reverse</h2>

    <div>Takes <var>$scalarObject->val</var> and returns a new array with the order of the elements reversed.</div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$preserveKeys</dt>
            <dd>
                If set to <code>TRUE</code> numeric keys are preserved. Non-numeric
                keys are not affected by this setting and will always be preserved.
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The reversed array.</p>
    </div>

    <div class="examples">
        <pre class="php-code">
            $input = ["php", 4.0, ["green", "red"]];
            reverse($input);       // output: [0 => ["green", "red"], 1 => 4, 2 => "php"]
            reverse($input, true); // output: [2 => ["green", "red"], 1 => 4, 0 => "php"]
        </pre>
    </div>
</div>
</body>
