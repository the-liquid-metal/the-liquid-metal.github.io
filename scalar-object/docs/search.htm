<h1>search</h1>
 <div>Searches <code>haystack</code> for <code>needle</code>.</div>

 <div>
  <h3>Parameters</h3>
   <dl>
     <dt>needle</dt>
     <dd><p>The searched value.</p>
      <blockquote><strong>Note</strong>:
        If <code>needle</code> is a string, the comparison is done
        in a case-sensitive manner.
       </blockquote>
     </dd>

     <dt>haystack</dt>
     <dd>The array.</dd>

     <dt>strict</dt>
     <dd>If the third parameter <code>strict</code> is set to <code>TRUE</code>
       then the <strong>search()</strong> function will search for
       <em>identical</em> elements in the
       <code>haystack</code>. This means it will also check the
       <a href="language.types.php">types</a> of the
       <code>needle</code> in the <code>haystack</code>,
       and objects must be the same instance.</dd>
   </dl>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns the key for <code>needle</code> if it is found in the
   array, <code>FALSE</code> otherwise.
  </p>
  <p>
   If <code>needle</code> is found in <code>haystack</code>
   more than once, the first matching key is returned. To return the keys for
   all matching values, use <a href="function.array-keys.php">array_keys()</a> with the optional
   <code>search_value</code> parameter instead.
  </p>

  <div class="warning">
    <strong>Warning</strong><br/>
    This function may return Boolean <code>FALSE</code>, but may also return
    a non-Boolean value which evaluates to <code>FALSE</code>. Please read the
    section on <a href="language.types.boolean.php">Booleans</a> for more information. Use 
    <a href="language.operators.comparison.php">the === operator</a> for testing the return
    value of this function.
  </div>
 </div>

 <div class="examples">
    <p><strong>Example #1 search() example</strong></p>
<pre class="php-code">&lt;?php
$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');

$key = search('green', $array); // $key = 2;
$key = search('red', $array);   // $key = 1;
?></pre>
 </div>
