<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>unshift( mixed <var>$value1</var>, mixed <var>...</var> ): array</code>
  <p>
    Context: array.<br/>
    Alias of <a href="http://php.net/manual/en/function.array-unshift.php">array_unshift</a>.<br/>
    Prepend one or more elements to the beginning.
  </p>
</div>
<div class="ajax-area">
  <h1>unshift</h1>

  <div>
    <strong>unshift()</strong> prepends passed elements to the front of the <var>$scalarObject->val</var>.
    Note that the list of elements is prepended as a whole, so that the prepended elements
    stay in the same order.  All numerical array keys will be modified to start counting from
    zero while literal keys won't be touched.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$value1</dt>
      <dd>First value to prepend.</dd>

      <dt>...</dt>
      <dd>another values to prepend.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>The new number of elements in the <var>$scalarObject->val</var>.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 unshift() example</strong></p>
    <pre class="php-code">
      <?php
      $queue = array("orange", "banana");
      unshift($queue, "apple", "raspberry");
      print_r($queue);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [0] => apple
          [1] => raspberry
          [2] => orange
          [3] => banana
      )
    </pre>
  </div>
</div>
</body>
