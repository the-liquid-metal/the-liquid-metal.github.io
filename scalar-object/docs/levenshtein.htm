<h1>levenshtein</h1>

 <div>
  <p>
   The Levenshtein distance is defined as the minimal number of
   characters you have to replace, insert or delete to transform
   <code>str1</code> into <code>str2</code>.
   The complexity of the algorithm is <em>O(m*n)</em>,
   where <em>n</em> and <em>m</em> are the
   length of <code>str1</code> and
   <code>str2</code> (rather good when compared to
   <span><a href="function.similar-text.php">similar_text()</a></span>, which is O(max(n,m)**3),
   but still expensive).
  </p>
  <p>
   In its simplest form the function will take only the two
   strings as parameter and will calculate just the number of
   insert, replace and delete operations needed to transform
   <code>str1</code> into <code>str2</code>.
  </p>
  <p>
   A second variant will take three additional parameters that
   define the cost of insert, replace and delete operations.  This
   is more general and adaptive than variant one, but not as
   efficient.
  </p>
 </div>

<div>
  <h3>Parameters</h3>
  <p>
   <dl>
     <dt><code>str1</code></dt>
     <dd><p>One of the strings being evaluated for Levenshtein distance.</p></dd>

     <dt><code>str2</code></dt>
     <dd><p>One of the strings being evaluated for Levenshtein distance.</p></dd>

     <dt><code>cost_ins</code></dt>
     <dd><p>Defines the cost of insertion.</p></dd>

     <dt><code>cost_rep</code></dt>
     <dd><p>Defines the cost of replacement.</p></dd>

     <dt><code>cost_del</code></dt>
     <dd><p>Defines the cost of deletion.</p></dd>
   </dl>
  </p>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   This function returns the Levenshtein-Distance between the
   two argument strings or -1, if one of the argument strings
   is longer than the limit of 255 characters.
  </p>
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 <span><strong>levenshtein()</strong></span> example</strong></p>
    <div>
     <pre><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;input&nbsp;misspelled&nbsp;word<br /></span><span style="color: #0000BB">$input&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'carrrot'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;array&nbsp;of&nbsp;words&nbsp;to&nbsp;check&nbsp;against<br /></span><span style="color: #0000BB">$words&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">'apple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'pineapple'</span><span style="color: #007700">,</span><span style="color: #DD0000">'banana'</span><span style="color: #007700">,</span><span style="color: #DD0000">'orange'</span><span style="color: #007700">,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">'radish'</span><span style="color: #007700">,</span><span style="color: #DD0000">'carrot'</span><span style="color: #007700">,</span><span style="color: #DD0000">'pea'</span><span style="color: #007700">,</span><span style="color: #DD0000">'bean'</span><span style="color: #007700">,</span><span style="color: #DD0000">'potato'</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;no&nbsp;shortest&nbsp;distance&nbsp;found,&nbsp;yet<br /></span><span style="color: #0000BB">$shortest&nbsp;</span><span style="color: #007700">=&nbsp;-</span><span style="color: #0000BB">1</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;loop&nbsp;through&nbsp;words&nbsp;to&nbsp;find&nbsp;the&nbsp;closest<br /></span><span style="color: #007700">foreach&nbsp;(</span><span style="color: #0000BB">$words&nbsp;</span><span style="color: #007700">as&nbsp;</span><span style="color: #0000BB">$word</span><span style="color: #007700">)&nbsp;{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;calculate&nbsp;the&nbsp;distance&nbsp;between&nbsp;the&nbsp;input&nbsp;word,<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;and&nbsp;the&nbsp;current&nbsp;word<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$lev&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">levenshtein</span><span style="color: #007700">(</span><span style="color: #0000BB">$input</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$word</span><span style="color: #007700">);<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;check&nbsp;for&nbsp;an&nbsp;exact&nbsp;match<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">if&nbsp;(</span><span style="color: #0000BB">$lev&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #0000BB">0</span><span style="color: #007700">)&nbsp;{<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;closest&nbsp;word&nbsp;is&nbsp;this&nbsp;one&nbsp;(exact&nbsp;match)<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$closest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">$word</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$shortest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">0</span><span style="color: #007700">;<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;break&nbsp;out&nbsp;of&nbsp;the&nbsp;loop;&nbsp;we've&nbsp;found&nbsp;an&nbsp;exact&nbsp;match<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">break;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br /><br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;if&nbsp;this&nbsp;distance&nbsp;is&nbsp;less&nbsp;than&nbsp;the&nbsp;next&nbsp;found&nbsp;shortest<br />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;distance,&nbsp;OR&nbsp;if&nbsp;a&nbsp;next&nbsp;shortest&nbsp;word&nbsp;has&nbsp;not&nbsp;yet&nbsp;been&nbsp;found<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #007700">if&nbsp;(</span><span style="color: #0000BB">$lev&nbsp;</span><span style="color: #007700">&lt;=&nbsp;</span><span style="color: #0000BB">$shortest&nbsp;</span><span style="color: #007700">||&nbsp;</span><span style="color: #0000BB">$shortest&nbsp;</span><span style="color: #007700">&lt;&nbsp;</span><span style="color: #0000BB">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #FF8000">//&nbsp;set&nbsp;the&nbsp;closest&nbsp;match,&nbsp;and&nbsp;shortest&nbsp;distance<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$closest&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">$word</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$shortest&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">$lev</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;}<br />}<br /><br />echo&nbsp;</span><span style="color: #DD0000">"Input&nbsp;word:&nbsp;</span><span style="color: #0000BB">$input</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />if&nbsp;(</span><span style="color: #0000BB">$shortest&nbsp;</span><span style="color: #007700">==&nbsp;</span><span style="color: #0000BB">0</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Exact&nbsp;match&nbsp;found:&nbsp;</span><span style="color: #0000BB">$closest</span><span style="color: #DD0000">\n"</span><span style="color: #007700">;<br />}&nbsp;else&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Did&nbsp;you&nbsp;mean:&nbsp;</span><span style="color: #0000BB">$closest</span><span style="color: #DD0000">?\n"</span><span style="color: #007700">;<br />}<br /><br /></span><span style="color: #0000BB">?&gt;</span></pre>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<pre>
Input word: carrrot
Did you mean: carrot?
</pre>
    </div>
   </div>
  </p>
 </div>
