<h1>levenshtein</h1>

 <div>
  <p>
   The Levenshtein distance is defined as the minimal number of
   characters you have to replace, insert or delete to transform
   <code>str1</code> into <code>str2</code>.
   The complexity of the algorithm is <em>O(m*n)</em>,
   where <em>n</em> and <em>m</em> are the
   length of <code>str1</code> and
   <code>str2</code> (rather good when compared to
   <a href="function.similar-text.php">similar_text()</a>, which is O(max(n,m)**3),
   but still expensive).
  </p>
  <p>
   In its simplest form the function will take only the two
   strings as parameter and will calculate just the number of
   insert, replace and delete operations needed to transform
   <code>str1</code> into <code>str2</code>.
  </p>
  <p>
   A second variant will take three additional parameters that
   define the cost of insert, replace and delete operations.  This
   is more general and adaptive than variant one, but not as
   efficient.
  </p>
 </div>

<div>
  <h3>Parameters</h3>
   <dl>
     <dt>str1</dt>
     <dd>One of the strings being evaluated for Levenshtein distance.</dd>

     <dt>str2</dt>
     <dd>One of the strings being evaluated for Levenshtein distance.</dd>

     <dt>cost_ins</dt>
     <dd>Defines the cost of insertion.</dd>

     <dt>cost_rep</dt>
     <dd>Defines the cost of replacement.</dd>

     <dt>cost_del</dt>
     <dd>Defines the cost of deletion.</dd>
   </dl>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   This function returns the Levenshtein-Distance between the
   two argument strings or -1, if one of the argument strings
   is longer than the limit of 255 characters.
  </p>
 </div>

 <div class="examples">
    <p><strong>Example #1 levenshtein() example</strong></p>
<pre class="php-code">&lt;?php
// input misspelled word
$input = 'carrrot';

// array of words to check against
$words  = array('apple','pineapple','banana','orange',
                'radish','carrot','pea','bean','potato');

// no shortest distance found, yet
$shortest = -1;

// loop through words to find the closest
foreach ($words as $word) {

    // calculate the distance between the input word,
    // and the current word
    $lev = levenshtein($input, $word);

    // check for an exact match
    if ($lev == 0) {

        // closest word is this one (exact match)
        $closest = $word;
        $shortest = 0;

        // break out of the loop; we've found an exact match
        break;
    }

    // if this distance is less than the next found shortest
    // distance, OR if a next shortest word has not yet been found
    if ($lev &lt;= $shortest || $shortest &lt; 0) {
        // set the closest match, and shortest distance
        $closest  = $word;
        $shortest = $lev;
    }
}

echo "Input word: $input\n";
if ($shortest == 0) {
    echo "Exact match found: $closest\n";
} else {
    echo "Did you mean: $closest?\n";
}

?></pre>
    <div>The above example will output:</div>
<pre>
Input word: carrrot
Did you mean: carrot?
</pre>
 </div>
