<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>merge</h1>

    <div class="short-description">
        <code>merge (bool <var>$recursive</var> = false, iterable ...<var>$arrays</var>): static</code>
        <p>
            Merge one or more arrays.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-merge.php">array_merge</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-merge-recursive.php">array_merge_recursive</a>.<br/>
        </p>
    </div>

    <p>
        Merges the elements of one or more arrays together so that the values of one
        are appended to the end of the previous one. It returns the resulting array.
    </p>
    <p>
        If the input arrays have the same string keys, then the later value for that key
        will overwrite the previous one.  If, however, the arrays contain numeric keys,
        the later value will <em>not</em> overwrite the original value, but will be appended.
    </p>
    <p>
        Values in the input array with numeric keys will be renumbered with
        incrementing keys starting from zero in the result array.
    </p>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>Array to merge.</dd>

        <dt>...</dt>
        <dd>Another arrays to merge.</dd>
    </dl>

    <h3>Return Values</h3>
    <p>The resulting array.</p>

    <div>
        If you want to append array elements from the second array to the
        first array while not overwriting the elements from the first
        array and not re-indexing, use the <em>+</em> array union operator:
    </div>

    <div>
        The keys from the first array will be preserved. If an array key exists
        in both arrays, then the element from the first array will be used and
        the matching key's element from the second array will be ignored.
    </div>

    <h2>recursiveMerge</h2>

    <p>
        <strong>recursiveMerge()</strong> merges the elements of
        one or more arrays together so that the values of one are appended
        to the end of the previous one.  It returns the resulting array.
    </p>
    <p>
        If the input arrays have the same string keys, then the values for
        these keys are merged together into an array, and this is done
        recursively, so that if one of the values is an array itself, the
        function will merge it with a corresponding entry in another array
        too. If, however, the arrays have the same numeric key, the later
        value will not overwrite the original value, but will be appended.
    </p>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>array to merge.</dd>

        <dt>...</dt>
        <dd>Variable list of arrays to recursively merge.</dd>
    </dl>

    <h3>Return Values</h3>
    <p>An array of values resulted from merging the arguments together.</p>

    <pre class="php-code">
        $arr1 = new ScalarArray("string", false, ["color" => "red", "blue", "orange"]);
        $arr2 = ["grey", "yellow", "color" => "green", "shape" => "trapezoid", "black"];
        $arr1->merge(false, $array2);
        // output: [
        //   "color" => "green",
        //   0 => "blue",
        //   1 => "orange",
        //   2 => "grey",
        //   3 => "yellow",
        //   "shape" => "trapezoid",
        //   4 => "black",
        // ]

        $arr1 = new ScalarArray("string", false, []);
        $arr2 = [1 => "data"];
        $arr1->merge(false, $arr2); // output: [0 => "data"]

        $arr1 = new ScalarArray("array", false, ["color" => ["favorite" => "red"], [5]]);
        $arr2 = [[10], "color" => ["favorite" => "green", "blue"]];
        $arr1->merge(true, $arr2);
        // output: [
        //   "color" => [
        //     "favorite" => ["red", "green"],
        //     0 => "blue",
        //   ],
        //   0 => [5],
        //   1 => [10],
        // ]
    </pre>
</div>
</body>
