<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>merge</h1>

    <div class="short-description">
        <code>merge( array <var>$array2</var>, array <var>...</var> ): array</code>
        <p>
            Alias of <a href="http://php.net/manual/en/function.array-merge.php">array_merge</a>.<br/>
            Merge one or more arrays.
        </p>
    </div>

    <div>
        <p>
            Merges the elements of one or more arrays together so that the values of one
            are appended to the end of the previous one. It returns the resulting array.
        </p>
        <p>
            If the input arrays have the same string keys, then the later value for that key
            will overwrite the previous one.  If, however, the arrays contain numeric keys,
            the later value will <em>not</em> overwrite the original value, but will be appended.
        </p>
        <p>
            Values in the input array with numeric keys will be renumbered with
            incrementing keys starting from zero in the result array.
        </p>
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$array2</dt>
            <dd>Array to merge.</dd>

            <dt>...</dt>
            <dd>Another arrays to merge.</dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The resulting array.</p>
    </div>

    <div class="examples">
        <p><strong>Example #1 merge() example</strong></p>
        <pre class="php-code">
            $array1 = ["color" => "red", 2, 4];
            $array2 = ["a", "b", "color" => "green", "shape" => "trapezoid", 4];
            $result = merge($array1, $array2);
            print_r($result);
        </pre>

        <div>The above example will output:</div>
        <pre class="output">
            Array
            (
                [color] => green
                [0] => 2
                [1] => 4
                [2] => a
                [3] => b
                [shape] => trapezoid
                [4] => 4
            )
        </pre>

        <p><strong>Example #2 Simple merge() example</strong></p>
        <pre class="php-code">
            $array1 = [];
            $array2 = [1 => "data"];
            $result = merge($array1, $array2);
        </pre>

        <div>Don't forget that numeric keys will be renumbered!</div>
        <pre class="output">
            Array
            (
                [0] => data
            )
        </pre>

        <div>
            If you want to append array elements from the second array to the
            first array while not overwriting the elements from the first
            array and not re-indexing, use the <em>+</em> array union operator:
        </div>
        <pre class="php-code">
            $array1 = [0 => "zero_a", 2 => "two_a",   3 => "three_a"];
            $array2 = [1 => "one_b",  3 => "three_b", 4 => "four_b"];
            $result = $array1 + $array2;
            var_dump($result);
        </pre>

        <div>
            The keys from the first array will be preserved. If an array key exists
            in both arrays, then the element from the first array will be used and
            the matching key's element from the second array will be ignored.
        </div>
        <pre class="output">
            array(5) {
              [0]=>
              string(6) "zero_a"
              [2]=>
              string(5) "two_a"
              [3]=>
              string(7) "three_a"
              [1]=>
              string(5) "one_b"
              [4]=>
              string(6) "four_b"
            }
        </pre>

        <p><strong>Example #3 merge() with non-array types</strong></p>
        <pre class="php-code">
            $beginning = "foo";
            $end = [1 => "bar"];
            $result = merge((array)$beginning, (array)$end);
            print_r($result);
        </pre>
        <div>The above example will output:</div>
        <pre class="output">
            Array
            (
                [0] => foo
                [1] => bar
            )
        </pre>
    </div>

    <h1>recursiveMerge</h1>

    <div class="short-description">
        <code>recursiveMerge( array <var>$array2</var>, array <var>...</var> ): array</code>
        <p>
            Alias of <a href="http://php.net/manual/en/function.array-merge-recursive.php">array_merge_recursive</a>.<br/>
            Merge two or more arrays recursively.
        </p>
    </div>

    <div>
        <p>
            <strong>recursiveMerge()</strong> merges the elements of
            one or more arrays together so that the values of one are appended
            to the end of the previous one.  It returns the resulting array.
        </p>
        <p>
            If the input arrays have the same string keys, then the values for
            these keys are merged together into an array, and this is done
            recursively, so that if one of the values is an array itself, the
            function will merge it with a corresponding entry in another array
            too. If, however, the arrays have the same numeric key, the later
            value will not overwrite the original value, but will be appended.
        </p>
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$array2</dt>
            <dd>array to merge.</dd>

            <dt>...</dt>
            <dd>Variable list of arrays to recursively merge.</dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>An array of values resulted from merging the arguments together.</p>
    </div>

    <div class="examples">
        <p><strong>Example #1 recursiveMerge() example</strong></p>
        <pre class="php-code">
            $ar1 = ["color" => ["favorite" => "red"], 5];
            $ar2 = [10, "color" => ["favorite" => "green", "blue"]];
            $result = recursiveMerge($ar1, $ar2);
            print_r($result);
        </pre>

        <div>The above example will output:</div>
        <pre class="output">
            Array
            (
                [color] => Array
                    (
                        [favorite] => Array
                            (
                                [0] => red
                                [1] => green
                            )
                        [0] => blue
                    )
                [0] => 5
                [1] => 10
            )
        </pre>
    </div>
</div>
</body>
