<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>lastOccurInsenPosition( string <var>$needle</var>, int <var>$offset</var> ): int</code>
  <p>
    Context: string.<br/>
    Alias of <a href="http://php.net/manual/en/function.strripos.php">strripos</a>.<br/>
    Find the position of the last occurrence of a case-insensitive substring.
  </p>
</div>
<div class="ajax-area">
  <h1>lastOccurInsenPosition</h1>

  <div>
    <p>
      Find the numeric position of the last occurrence of
      <var>$needle</var> in the <var>$scalarObject->val</var> string.
    </p>
    <p> 
      Unlike the <a href="lastOccurPosition.htm">lastOccurPosition()</a>,
      <strong>lastOccurInsenPosition()</strong> is case-insensitive.
    </p>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$needle</dt>
      <dd>
        If <var>$needle</var> is not a string, it is converted
        to an integer and applied as the ordinal value of a character.
      </dd>

      <dt>$offset</dt>
      <dd>
        If specified, search will start this number of characters counted from the
        beginning of the string. If the value is negative, search will instead start
        from that many characters from the end of the string, searching backwards.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the position where the needle exists relative to the beginnning of
      the <var>$scalarObject->val</var> string (independent of search direction
      or offset). Also note that string positions start at 0, and not 1.
    </p>
    <p>Returns <code>FALSE</code> if the needle was not found.</p>
    <div class="warning">
      <strong>Warning</strong><br/>
      This function may return Boolean <code>FALSE</code>, but may also return a non-Boolean
      value which evaluates to <code>FALSE</code>. Please read the section on boolean for more
      information. Use the <code>===</code> operator for testing the return value of this function.
    </div>
  </div>

  <div class="examples">
    <p><strong>Example #1 A simple lastOccurInsenPosition() example</strong></p>
    <pre class="php-code">
      <?php
      $haystack = 'ababcd';
      $needle   = 'aB';

      $pos      = lastOccurInsenPosition($haystack, $needle);

      if ($pos === false) {
          echo "Sorry, we did not find ($needle) in ($haystack)";
      } else {
          echo "Congratulations!\n";
          echo "We found the last ($needle) in ($haystack) at position ($pos)";
      }
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
       Congratulations!
       We found the last (aB) in (ababcd) at position (2)
    </pre>
  </div>
</div>
</body>
