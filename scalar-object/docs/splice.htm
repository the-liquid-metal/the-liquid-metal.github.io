<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">

</div>
<div class="ajax-area">
  <h1>splice</h1>

  <div>
    <p>
      Removes the elements designated by <code>offset</code> and <code>length</code>
      from the <code>input</code> array, and replaces them with the elements of the
      <code>replacement</code> array, if supplied.
    </p>
    <p>Note that numeric keys in <code>input</code> are not preserved.</p>

    <blockquote>
      <strong>Note</strong>: If <code>replacement</code> is not an array, it will be
      <a href="language.types.array.php#language.types.array.casting">typecast</a>
      to one (i.e. <code>(array) $parameter</code>). This may result in unexpected
      behavior when using an object or <code>NULL</code> <code>replacement</code>.
    </blockquote>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>input</dt>
      <dd>The input array.</dd>

      <dt>offset</dt>
      <dd>
        If <code>offset</code> is positive then the start of removed portion is at that
        offset from the beginning of the <code>input</code> array.  If <code>offset</code>
        is negative then it starts that far from the end of the <code>input</code> array.
      </dd>

      <dt>length</dt>
      <dd>
        If <code>length</code> is omitted, removes everything from <code>offset</code>
        to the end of the array. If <code>length</code> is specified and is positive, then
        that many elements will be removed. If <code>length</code> is specified and is
        negative then the end of the removed portion will be that many elements from the
        end of the array.  If <code>length</code> is specified and is zero, no elements will
        be removed. Tip: to remove everything from <code>offset</code> to the end of the
        array when <code>replacement</code> is also specified, use <em>count($input)</em> for
        <code>length</code>.
      </dd>

      <dt>replacement</dt>
      <dd>
        <p>
          If <code>replacement</code> array is specified, then the
          removed elements are replaced with elements from this array.
        </p>
        <p>
          If <code>offset</code> and <code>length</code> are such that nothing is removed,
          then the elements from the <code>replacement</code> array are inserted in the
          place specified by the <code>offset</code>. Note that keys in replacement array
          are not preserved.
        </p>
        <p>
          If <code>replacement</code> is just one element it is not necessary to put <em>array()</em>
          around it, unless the element is an array itself, an object or <code>NULL</code>.
        </p>
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns the array consisting of the extracted elements.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 splice() examples</strong></p>
    <pre class="php-code">
      <?php
      $input = array("red", "green", "blue", "yellow");
      splice($input, 2);
      // $input is now array("red", "green")

      $input = array("red", "green", "blue", "yellow");
      splice($input, 1, -1);
      // $input is now array("red", "yellow")

      $input = array("red", "green", "blue", "yellow");
      splice($input, 1, count($input), "orange");
      // $input is now array("red", "orange")

      $input = array("red", "green", "blue", "yellow");
      splice($input, -1, 1, array("black", "maroon"));
      // $input is now array("red", "green",
      //          "blue", "black", "maroon")

      $input = array("red", "green", "blue", "yellow");
      splice($input, 3, 0, "purple");
      // $input is now array("red", "green",
      //          "blue", "purple", "yellow");
      ?>
    </pre>

    <p><strong>Example #2 splice() examples</strong></p>
    <div>The following statements change the values of <var>$input</var> the same way:</div>
    <pre class="php-code">
      <?php
      array_push($input, $x, $y);
      splice($input, count($input), 0, array($x, $y));
      array_pop($input);
      splice($input, -1);
      array_shift($input);
      splice($input, 0, 1);
      array_unshift($input, $x, $y);
      splice($input, 0, 0, array($x, $y));
      $input[$x] = $y; // for arrays where key equals offset
      splice($input, $x, 1, $y);
      ?>
    </pre>
  </div>
</div>
</body>
