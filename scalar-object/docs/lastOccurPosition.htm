<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">

</div>
<div class="ajax-area">
  <h1>lastOccurPosition</h1>

  <div>
    Find the numeric position of the last occurrence of
    <code>needle</code> in the <code>haystack</code> string.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>haystack</dt>
      <dd>The string to search in.</dd>

      <dt>needle</dt>
      <dd>
        If <code>needle</code> is not a string, it is converted
        to an integer and applied as the ordinal value of a character.
      </dd>

      <dt>offset</dt>
      <dd>
        If specified, search will start this number of characters counted from the
        beginning of the string. If the value is negative, search will instead start
        from that many characters from the end of the string, searching backwards.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the position where the needle exists relative to the beginnning of the
      <code>haystack</code> string (independent of search direction or offset).
      Also note that string positions start at 0, and not 1.
    </p>
    <p>Returns <code>FALSE</code> if the needle was not found.</p>

    <div class="warning">
      <strong>Warning</strong><br/>
      This function may return Boolean <code>FALSE</code>, but may also return a non-Boolean
      value which evaluates to <code>FALSE</code>. Please read the section on
      <a href="language.types.boolean.php">Booleans</a> for more information. Use
      <a href="language.operators.comparison.php">the === operator</a> for testing
      the return value of this function.
    </div>
  </div>

  <div class="examples">
    <p><strong>Example #1 Checking if a needle is in the haystack</strong></p>
    <div>
      It is easy to mistake the return values for "character found at position
      0" and "character not found".  Here's how to detect the difference:
    </div>
    <pre class="php-code">
      <?php
      $pos = lastOccurPosition($mystring, "b");
      if ($pos === false) { // note: three equal signs
          // not found...
      }
      ?>
    </pre>

    <p><strong>Example #2 Searching with offsets</strong></p>
    <pre class="php-code">
      <?php
      $foo = "0123456789a123456789b123456789c";

      var_dump(lastOccurPosition($foo, '7', -5));  // Starts looking backwards five positions
                                         // from the end. Result: int(17)

      var_dump(lastOccurPosition($foo, '7', 20));  // Starts searching 20 positions into the
                                         // string. Result: int(27)

      var_dump(lastOccurPosition($foo, '7', 28));  // Result: bool(false)
      ?>
    </pre>
  </div>
</div>
</body>
