<h1>recursiveReplace</h1>
 <div>
  <p>
   <strong>recursiveReplace()</strong> replaces the values of
   <code>array1</code> with the same values from all the following
   arrays. If a key from the first array exists in the second array, its value
   will be replaced by the value from the second array. If the key exists in the
   second array, and not the first, it will be created in the first array.
   If a key only exists in the first array, it will be left as is. 
   If several arrays are passed for replacement, they will be processed
   in order, the later array overwriting the previous values.
  </p>
  <p>
   <strong>recursiveReplace()</strong> is recursive : it will recurse into
   arrays and apply the same process to the inner value.
  </p>
  <p>
   When the value in <code>array1</code> is scalar, it will be replaced
   by the value in <code>array2</code>, may it be scalar or array.
   When the value in <code>array1</code> and <code>array2</code>
   are both arrays, <strong>recursiveReplace()</strong> will replace
   their respective value recursively.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
   <dl>
     <dt>array1</dt>
     <dd>The array in which elements are replaced.</dd>

     <dt>array2</dt>
     <dd>The array from which elements will be extracted.</dd>

     <dt>...</dt>
     <dd>Optional. More arrays from which elements will be extracted.</dd>
   </dl>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>Returns an <a href="language.types.array.php">array</a>, or <code>NULL</code> if an error occurs.</p>
 </div>

 <div class="examples">
    <p><strong>Example #1 recursiveReplace() example</strong></p>
<pre class="php-code">
<?php
$base = array('citrus' => array( "orange") , 'berries' => array("blackberry", "raspberry"), );
$replacements = array('citrus' => array('pineapple'), 'berries' => array('blueberry'));

$basket = recursiveReplace($base, $replacements);
print_r($basket);

$basket = array_replace($base, $replacements);
print_r($basket);
?>
</pre>
    <div>The above example will output:</div>
<pre>
Array
(
    [citrus] => Array
        (
            [0] => pineapple
        )
    [berries] => Array
        (
            [0] => blueberry
            [1] => raspberry
        )
)
Array
(
    [citrus] => Array
        (
            [0] => pineapple
        )
    [berries] => Array
        (
            [0] => blueberry
        )
)
</pre>

    <p><strong>Example #2 recursiveReplace() and recursive behavior</strong></p>
<pre class="php-code">
<?php
$base = array('citrus' => array("orange") , 'berries' => array("blackberry", "raspberry"), 'others' => 'banana' );
$replacements = array('citrus' => 'pineapple', 'berries' => array('blueberry'), 'others' => array('litchis'));
$replacements2 = array('citrus' => array('pineapple'), 'berries' => array('blueberry'), 'others' => 'litchis');

$basket = recursiveReplace($base, $replacements, $replacements2);
print_r($basket);

?>
</pre>
    <div>The above example will output:</div>
<pre>
Array
(
    [citrus] => Array
        (
            [0] => pineapple
        )
    [berries] => Array
        (
            [0] => blueberry
            [1] => raspberry
        )
    [others] => litchis
)
</pre>
 </div>