<h1>explode</h1>
 <div>
  <p>
   Returns an array of strings, each of which is a substring of
   <code>string</code> formed by splitting it on
   boundaries formed by the string <code>delimiter</code>.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
   <dl>
     <dt>delimiter</dt>
     <dd>The boundary string.</dd>

     <dt>string</dt>
     <dd>The input string.</dd>

     <dt>limit</dt>
     <dd><p>If <code>limit</code> is set and positive, the returned array will contain
       a maximum of <code>limit</code> elements with the last
       element containing the rest of <code>string</code>.
      </p>
      <p>
       If the <code>limit</code> parameter is negative, all components
       except the last -<code>limit</code> are returned.
      </p>
      <p>
       If the <code>limit</code> parameter is zero, then this is treated as 1.</p></dd>
   </dl>

  <blockquote><strong>Note</strong>:
    Although <a href="function.implode.php">implode()</a> can, for historical reasons,
    accept its parameters in either order,
    <strong>explode()</strong> cannot. You must ensure that the
    <code>delimiter</code> argument comes before the
    <code>string</code> argument.
   </blockquote>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns an <a href="language.types.array.php">array</a> of <a href="language.types.string.php">string</a>s
   created by splitting the <code>string</code> parameter on
   boundaries formed by the <code>delimiter</code>.
  </p>
  <p>
   If <code>delimiter</code> is an empty <a href="language.types.string.php">string</a> (&quot;&quot;),
   <strong>explode()</strong> will return <strong><code>FALSE</code></strong>.
   If <code>delimiter</code> contains a value that is not
   contained in <code>string</code> and a negative
   <code>limit</code> is used, then an empty <a href="language.types.array.php">array</a> will be
   returned, otherwise an <a href="language.types.array.php">array</a> containing
   <code>string</code> will be returned.
  </p>
 </div>

 <div class="examples">
    <p><strong>Example #1 explode() examples</strong></p>
    <pre><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">//&nbsp;Example&nbsp;1<br /></span><span style="color: #0000BB">$pizza&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"piece1&nbsp;piece2&nbsp;piece3&nbsp;piece4&nbsp;piece5&nbsp;piece6"</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">$pieces&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">"&nbsp;"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$pizza</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #0000BB">$pieces</span><span style="color: #007700">[</span><span style="color: #0000BB">0</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;piece1<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$pieces</span><span style="color: #007700">[</span><span style="color: #0000BB">1</span><span style="color: #007700">];&nbsp;</span><span style="color: #FF8000">//&nbsp;piece2<br /><br />//&nbsp;Example&nbsp;2<br /></span><span style="color: #0000BB">$data&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"foo:*:1023:1000::/home/foo:/bin/sh"</span><span style="color: #007700">;<br />list(</span><span style="color: #0000BB">$user</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$pass</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$uid</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$gid</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$gecos</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$home</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$shell</span><span style="color: #007700">)&nbsp;=&nbsp;</span><span style="color: #0000BB">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">":"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$data</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #0000BB">$user</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;foo<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">$pass</span><span style="color: #007700">;&nbsp;</span><span style="color: #FF8000">//&nbsp;*<br /><br /></span><span style="color: #0000BB">?&gt;</span></pre>

    <p><strong>Example #2 explode() return examples</strong></p>
    <pre><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">/*&nbsp;<br />&nbsp;&nbsp;&nbsp;A&nbsp;string&nbsp;that&nbsp;doesn't&nbsp;contain&nbsp;the&nbsp;delimiter&nbsp;will&nbsp;simply<br />&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;one-length&nbsp;array&nbsp;of&nbsp;the&nbsp;original&nbsp;string.<br />*/<br /></span><span style="color: #0000BB">$input1&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">$input2&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"hello,there"</span><span style="color: #007700">;<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(&nbsp;</span><span style="color: #0000BB">explode</span><span style="color: #007700">(&nbsp;</span><span style="color: #DD0000">','</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$input1&nbsp;</span><span style="color: #007700">)&nbsp;);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(&nbsp;</span><span style="color: #0000BB">explode</span><span style="color: #007700">(&nbsp;</span><span style="color: #DD0000">','</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$input2&nbsp;</span><span style="color: #007700">)&nbsp;);<br /><br /></span><span style="color: #0000BB">?&gt;</span></pre>

    <div>The above example will output:</div>
<pre>
array(1)
(
    [0] =&gt; string(5) &quot;hello&quot;
)
array(2)
(
    [0] =&gt; string(5) &quot;hello&quot;
    [1] =&gt; string(5) &quot;there&quot;
)
</pre>

    <p><strong>Example #3 <code>limit</code> parameter examples</strong></p>
    <pre><span style="color: #0000BB">&lt;?php<br />$str&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">'one|two|three|four'</span><span style="color: #007700">;<br /><br /></span><span style="color: #FF8000">//&nbsp;positive&nbsp;limit<br /></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$str</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">));<br /><br /></span><span style="color: #FF8000">//&nbsp;negative&nbsp;limit&nbsp;(since&nbsp;PHP&nbsp;5.1)<br /></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">explode</span><span style="color: #007700">(</span><span style="color: #DD0000">'|'</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$str</span><span style="color: #007700">,&nbsp;-</span><span style="color: #0000BB">1</span><span style="color: #007700">));<br /></span><span style="color: #0000BB">?&gt;</span></pre>

    <div>The above example will output:</div>
<pre>
Array
(
    [0] =&gt; one
    [1] =&gt; two|three|four
)
Array
(
    [0] =&gt; one
    [1] =&gt; two
    [2] =&gt; three
)
</pre>
 </div>

  <blockquote><strong>Note</strong>:This function is binary-safe.</blockquote>
