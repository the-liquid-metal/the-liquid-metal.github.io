<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>explode( string <var>$delimiter</var>, int <var>$limit</var> = null ): array</code>
  <p>
    Context: string.<br/>
    Alias of <a href="http://php.net/manual/en/function.explode.php">explode</a>.<br/>
    Split a string by string.
  </p>
</div>
<div class="ajax-area">
  <h1>explode</h1>

  <div>
    Returns an array of strings, each of which is a substring of
    <var>$scalarObject->val</var> formed by splitting it on
    boundaries formed by the string <var>$delimiter</var>.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>delimiter</dt>
      <dd>The boundary string.</dd>

      <dt>limit</dt>
      <dd>
        <p>If <var>$limit</var> is set and positive, the returned array will contain
          a maximum of <var>$limit</var> elements with the last
          element containing the rest of <var>$scalarObject->val</var>.
        </p>
        <p>
          If the <var>$limit</var> parameter is negative, all components
          except the last -<var>$limit</var> are returned.
        </p>
        <p>If the <var>$limit</var> parameter is zero, then this is treated as 1.</p>
      </dd>
    </dl>

    <blockquote>
      <strong>Note</strong>: Although <a href="implode.htm">implode()</a> can, for
      historical reasons, accept its parameters in either order, <strong>explode()</strong>
      cannot. You must ensure that the <var>$delimiter</var> argument comes before the
      <var>$scalarObject->val</var> argument.
     </blockquote>
  </div>

  <div>
    <h3>Return Values</h3>
    <ul>
      <li>
        An array of strings created by splitting the <var>$scalarObject->val</var>
        on boundaries formed by the <var>$delimiter</var>.
      </li>
      <li>
        If <var>$delimiter</var> is an empty string (""), <strong>explode()</strong> will return <code>FALSE</code>.
      </li>
      <li>
        If <var>$delimiter</var> contains a value that is not contained in <var>$scalarObject->val</var>
        and a negative <var>$limit</var> is used, then an empty array will be returned,
      </li>
      <li>otherwise an array containing <var>$scalarObject->val</var> will be returned.
      </li>
  </div>

  <div class="examples">
    <p><strong>Example #1 explode() examples</strong></p>
    <pre class="php-code">
      <?php
      // Example 1
      $pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
      $pieces = explode(" ", $pizza);
      echo $pieces[0]; // piece1
      echo $pieces[1]; // piece2

      // Example 2
      $data = "foo:*:1023:1000::/home/foo:/bin/sh";
      list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
      echo $user; // foo
      echo $pass; // *
      ?>
    </pre>

    <p><strong>Example #2 explode() return examples</strong></p>
    <pre class="php-code">
      <?php
      /* 
         A string that doesn't contain the delimiter will simply
         return a one-length array of the original string.
      */
      $input1 = "hello";
      $input2 = "hello,there";
      var_dump( explode( ',', $input1 ) );
      var_dump( explode( ',', $input2 ) );
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      array(1)
      (
          [0] => string(5) "hello"
      )
      array(2)
      (
          [0] => string(5) "hello"
          [1] => string(5) "there"
      )
    </pre>

    <p><strong>Example #3 <var>$limit</var> parameter examples</strong></p>
    <pre class="php-code">
      <?php
      $str = 'one|two|three|four';

      // positive limit
      print_r(explode('|', $str, 2));

      // negative limit (since PHP 5.1)
      print_r(explode('|', $str, -1));
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [0] => one
          [1] => two|three|four
      )
      Array
      (
          [0] => one
          [1] => two
          [2] => three
      )
    </pre>
  </div>

  <blockquote><strong>Note</strong>:This function is binary-safe.</blockquote>
</div>
</body>
