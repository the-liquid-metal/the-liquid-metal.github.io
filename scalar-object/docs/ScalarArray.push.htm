<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>push</h1>

    <div class="short-description">
        <code>push( mixed <var>$value1</var>, mixed <var>...</var> ): array</code>
        <p>
            Alias of <a href="http://php.net/manual/en/function.array-push.php">array_push</a>.<br/>
            Pushes one or more elements onto the end.
        </p>
    </div>

    <div>
        <p>
            <strong>push()</strong> treats <var>$scalarObject->val</var> as a
            stack, and pushes the passed variables onto the end of
            <var>$scalarObject->val</var>. The length of <var>$scalarObject->val</var>
            increases by the number of variables pushed. Has the same effect as:
        </p>
        <pre class="php-code">
      <?php
      $array[] = $var;
      ?>
    </pre>

        <p>repeated for each passed value.</p>
        <blockquote>
            <strong>Note</strong>: If you use <strong>push()</strong> to add one element
            to the array it's better to use <em>$array[] = </em> because in that way there
            is no overhead of calling a function.
        </blockquote>

        <blockquote>
            <strong>Note</strong>: <strong>push()</strong> will raise a warning if the
            first argument is not an array. This differs from the <em>$var[]</em> behaviour
            where a new array is created.
        </blockquote>
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$value1</dt>
            <dd>The first value to push onto the end of the <var>$scalarObject->val</var>.</dd>

            <dt>...</dt>
            <dd>More values to push onto the end of the <var>$scalarObject->val</var>.</dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The new number of elements in the array.</p>
    </div>

    <div class="examples">
        <p><strong>Example #1 push() example</strong></p>
        <pre class="php-code">
      <?php
      $stack = array("orange", "banana");
      push($stack, "apple", "raspberry");
      print_r($stack);
      ?>
    </pre>

        <div>The above example will output:</div>
        <pre class="output">
      Array
      (
          [0] => orange
          [1] => banana
          [2] => apple
          [3] => raspberry
      )
    </pre>
    </div>
</div>
</body>
