<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>unique</h1>

    <div class="short-description">
        <code>unique (int <var>$flags</var> = SORT_STRING): self</code>
        <p>
            Removes duplicate values.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-unique.php">array_unique</a>.<br/>
        </p>
    </div>

    <p>
        Takes an input <em>internal array</em> and returns a new array
        without duplicate values.
    </p>
    <p>
        Note that keys are preserved. <strong>unique()</strong> sorts the values
        treated as string at first, then will keep the first key encountered for
        every value, and ignore all following keys. It does not mean that the key
        of the first related value from the unsorted <em>internal array</em> will be kept.
    </p>
    <blockquote>
        <strong>Note</strong>: Two elements are considered equal if and only if
        <code>(string) $elem1 === (string) $elem2</code> i.e. when the string representation
        is the same, the first element will be used.
    </blockquote>

    <h3>Parameters</h3>
    <dl>
        <dt>$flags</dt>
        <dd>
            <p>Sorting type flags:</p>
            <ul>
                <li><code>SORT_REGULAR</code> - compare items normally (don't change types)</li>
                <li><code>SORT_NUMERIC</code> - compare items numerically</li>
                <li><code>SORT_STRING</code> - compare items as strings</li>
                <li><code>SORT_LOCALE_STRING</code> - compare items as strings, based on the current locale.</li>
            </ul>
        </dd>
    </dl>

    <h3>Return Values</h3>
    <p>The filtered array.</p>

    <pre class="php-code">
        $a = new ScalarArray("string", false, ["a" => "green", "red", "b" => "green", "blue", "red"]);
        $a->unique(); // output: ["a" => "green", 0 => "red", 1 => "blue"]

        $a = new ScalarArray("int", false, [4, 4, 3, 4, 3, 3]);
        $a->unique(); // output: [0 => 4, 2 => 3]
    </pre>
</div>
</body>
