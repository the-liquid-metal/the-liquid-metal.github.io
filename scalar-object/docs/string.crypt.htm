<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>crypt( string <var>$salt</var> = null ): string</code>
  <p>
    Context: string.<br/>
    Alias of <a href="http://php.net/manual/en/function.crypt.php">crypt</a>.<br/>
    One-way hashing.
  </p>
</div>
<div class="ajax-area">
  <h1>crypt</h1>

  <div>
    <p>
      <strong>crypt()</strong> will return a hashed string using the 
      standard Unix <abbr>DES</abbr>-based algorithm or
      alternative algorithms that may be available on the system.
    </p>
    <p>
      The <var>$scalarObject->val</var> parameter is optional. However, <strong>crypt()</strong>
      creates a weak password without the <var>$scalarObject->val</var>. PHP 5.6 or later raise an E_NOTICE
      error without it. Make sure to specify a strong enough salt for better security. 
    </p>
    <p>
      <a href="function.password-hash.php">password_hash()</a> uses a strong hash, generates a strong salt,
      and applies proper rounds automatically. <a href="function.password-hash.php">password_hash()</a>
      is a simple <strong>crypt()</strong> wrapper and compatible with existing password hashes. Use of
      <a href="function.password-hash.php">password_hash()</a> is encouraged.
    </p>
    <p>
      Some operating systems support more than one type of hash. In fact, sometimes the standard DES-based
      algorithm is replaced by an MD5-based algorithm.  The hash type is triggered by the salt argument.
      Prior to 5.3, PHP would determine the available algorithms at install-time based on the system's
      crypt(). If no salt is provided, PHP will auto-generate either a standard two character (DES) salt,
      or a twelve character (MD5), depending on the availability of MD5 crypt().  PHP sets a constant named
      <code>CRYPT_SALT_LENGTH</code> which indicates the longest valid salt allowed by the available hashes.
    </p>
    <p>
      The standard DES-based <strong>crypt()</strong> returns the salt as the first two characters of the
      output. It also only uses the first eight characters of <var>$scalarObject->val</var>, so longer strings that
      start with the same eight characters will generate the same result (when the same salt is used).
    </p>
    <p>
      On systems where the crypt() function supports multiple hash types, the following constants are
      set to 0 or 1 depending on whether the given type is available:
    </p>
    <ul>
      <li>
        <code>CRYPT_STD_DES</code> - Standard DES-based hash with a two character salt from the
        alphabet "./0-9A-Za-z". Using invalid characters in the salt will cause crypt() to fail.
        <br/>&nbsp;
      </li>
      <li>
        <code>CRYPT_EXT_DES</code> - Extended DES-based hash. The "salt" is a
        9-character string consisting of an underscore followed by 4 bytes of iteration count and
        4 bytes of salt. These are encoded as printable characters, 6 bits per character, least
        significant character first. The values 0 to 63 are encoded as "./0-9A-Za-z". Using invalid
        characters in the salt will cause crypt() to fail.<br/>&nbsp;
      </li>
      <li><code>CRYPT_MD5</code> - MD5 hashing with a twelve character salt starting with $1$<br/>&nbsp;</li>
      <li>
        <code>CRYPT_BLOWFISH</code> - Blowfish hashing with a salt as
        follows: "$2a$", "$2x$" or "$2y$", a two digit cost parameter, "$", and
        22 characters from the alphabet "./0-9A-Za-z". Using characters outside of
        this range in the salt will cause crypt() to return a zero-length string.
        The two digit cost parameter is the base-2 logarithm of the iteration
        count for the underlying Blowfish-based hashing algorithmeter and must be
        in range 04-31, values outside this range will cause crypt() to fail.
        Versions of PHP before 5.3.7 only support "$2a$" as the salt prefix: PHP
        5.3.7 introduced the new prefixes to fix a security weakness in the
        Blowfish implementation.  Please refer to
        <a href="http://www.php.net/security/crypt_blowfish.php">&raquo; this document</a> for full
        details of the security fix, but to summarise, developers targeting only
        PHP 5.3.7 and later should use "$2y$" in preference to "$2a$".

        <div class="caution">
          <strong>Caution</strong><br/>
          Using the <code>CRYPT_BLOWFISH</code> algorithm, will result in the <var>$scalarObject->val</var>
          being truncated to a maximum length of 72 characters.
        </div>
        <br/>&nbsp;
      </li>
      <li>
        <code>CRYPT_SHA256</code> - SHA-256 hash with a sixteen character salt
        prefixed with $5$. If the salt string starts with 'rounds=&lt;N>$', the numeric value of N
        is used to indicate how many times the hashing loop should be executed, much like the cost
        parameter on Blowfish. The default number of rounds is 5000, there is a minimum of
        1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to
        the nearest limit.<br/>&nbsp;
      </li>
      <li>
        <code>CRYPT_SHA512</code> - SHA-512 hash with a sixteen character salt
        prefixed with $6$. If the salt string starts with 'rounds=&lt;N>$', the numeric value of N
        is used to indicate how many times the hashing loop should be executed, much like the cost
        parameter on Blowfish. The default number of rounds is 5000, there is a minimum of
        1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to
        the nearest limit.<br/>&nbsp;
      </li>
    </ul>

    <blockquote>
      <strong>Note</strong>: As of PHP 5.3.0, PHP contains its own implementation and will use that
      if the system lacks of support for one or more of the algorithms.
    </blockquote>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$salt</dt>
      <dd>
        An optional salt string to base the hashing on. If not provided, the behaviour is
        defined by the algorithm implementation and can lead to unexpected results.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the hashed string or a string that is shorter than 13 characters
      and is guaranteed to differ from the salt on failure.
    </p>

    <div class="warning">
      <strong>Warning</strong><br/>
      When validating passwords, a string comparison function that isn't
      vulnerable to timing attacks should be used to compare the output of
      <strong>crypt()</strong> to the previously known hash. PHP 5.6 onwards
      provides <a href="function.hash-equals.php">hash_equals()</a> for this purpose.
    </div>
  </div>

  <div class="examples">
    <p><strong>Example #1 crypt() examples</strong></p>
    <pre class="php-code">
      <?php
      $hashed_password = crypt('mypassword'); // let the salt be automatically generated
  
      /* You should pass the entire results of crypt() as the salt for comparing a
         password, to avoid problems when different hashing algorithms are used. (As
         it says above, standard DES-based password hashing uses a 2-character salt,
         but MD5-based hashing uses 12.) */
      if (hash_equals($hashed_password, crypt($user_input, $hashed_password))) {
         echo "Password verified!";
      }
      ?>
    </pre>

    <p><strong>Example #2 Using crypt() with htpasswd</strong></p>
    <pre class="php-code">
      <?php
      // Set the password
      $password = 'mypassword';

      // Get the hash, letting the salt be automatically generated
      $hash = crypt($password);
      ?>
    </pre>

    <p><strong>Example #3 Using crypt() with different hash types</strong></p>
    <pre class="php-code">
      <?php
      /* These salts are examples only, and should not be used verbatim in your code.
         You should generate a distinct, correctly-formatted salt for each password.
      */
      if (CRYPT_STD_DES == 1) {
          echo 'Standard DES: ' . crypt('rasmuslerdorf', 'rl') . "\n";
      }

      if (CRYPT_EXT_DES == 1) {
          echo 'Extended DES: ' . crypt('rasmuslerdorf', '_J9..rasm') . "\n";
      }

      if (CRYPT_MD5 == 1) {
          echo 'MD5:          ' . crypt('rasmuslerdorf', '$1$rasmusle$') . "\n";
      }

      if (CRYPT_BLOWFISH == 1) {
          echo 'Blowfish:     ' . crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$') . "\n";
      }

      if (CRYPT_SHA256 == 1) {
          echo 'SHA-256:      ' . crypt('rasmuslerdorf', '$5$rounds=5000$usesomesillystringforsalt$') . "\n";
      }

      if (CRYPT_SHA512 == 1) {
          echo 'SHA-512:      ' . crypt('rasmuslerdorf', '$6$rounds=5000$usesomesillystringforsalt$') . "\n";
      }
      ?>
    </pre>

    <div>The above example will output something similar to:</div>
    <pre class="output">
      Standard DES: rl.3StKT.4T8M
      Extended DES: _J9..rasmBYk8r9AiWNc
      MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0
      Blowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi
      SHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6
      SHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21
    </pre>
  </div>

  <blockquote>
    <strong>Note</strong>: There is no decrypt function, since
    <strong>crypt()</strong> uses a one-way algorithm.
  </blockquote>
</div>
</body>
