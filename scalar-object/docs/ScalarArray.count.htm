<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>count</h1>

    <div class="short-description">
        <code>count (int <var>$mode</var> = COUNT_NORMAL): int</code>
        <p>
            Counts all elements.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.count.php">count</a>.<br/>
        </p>
    </div>

    <div>
        <p>Counts all elements in an array, or something in an object.</p>
        <p>
            For objects, if you have <a href="ref.spl.php">SPL</a> installed, you can hook into
            <strong>count()</strong> by implementing interface <a href="class.countable.php">Countable</a>.
            The interface has exactly one method, <a href="countable.count.php">Countable::count()</a>,
            which returns the return value for the <strong>count()</strong> function.
        </p>
        <p>
            Please see the array section of the manual for a
            detailed explanation of how arrays are implemented and used in PHP.
        </p>
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$mode</dt>
            <dd>
                <p>
                    If the optional <var>$mode</var> parameter is set to
                    <code>COUNT_RECURSIVE</code> (or 1), <strong>count()</strong>
                    will recursively count the array.  This is particularly useful for
                    counting all the elements of a multidimensional array.
                </p>
                <div class="caution">
                    <strong>Caution</strong><br/>
                    <strong>count()</strong> can detect recursion to avoid an infinite loop, but will emit
                    an <code>E_WARNING</code> every time it does (in case the array contains itself more
                    than once) and return a count higher than may be expected.
                </div>
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The number of elements in <em>internal array</em>.</p>
        <!-- other type of return value is not relevant -->
        <!-- caution is not relevant -->
    </div>

    <div class="examples">
        <pre class="php-code">
            $a = [0 => 1, 1 => 3, 2 => 5];
            count($a); // output: 3

            $food = [
                "fruits" => ["orange", "banana", "apple"],
                "veggie" => ["carrot", "collard", "pea"],
            ];
            count($food, COUNT_RECURSIVE); // output: 8
            count($food);                  // output: 2
        </pre>
    </div>
</div>
</body>
