<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>count</h1>

    <div class="short-description">
        <code>count( int <var>$mode</var> = COUNT_NORMAL ): int</code>
        <p>
            Alias of <a href="http://php.net/manual/en/function.count.php">count</a>.<br/>
            Counts all elements.
        </p>
    </div>

    <div>
        <p>Counts all elements in an array, or something in an object.</p>
        <p>
            For objects, if you have <a href="ref.spl.php">SPL</a> installed, you can hook into
            <strong>count()</strong> by implementing interface <a href="class.countable.php">Countable</a>.
            The interface has exactly one method, <a href="countable.count.php">Countable::count()</a>,
            which returns the return value for the <strong>count()</strong> function.
        </p>
        <p>
            Please see the array section of the manual for a
            detailed explanation of how arrays are implemented and used in PHP.
        </p>
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$mode</dt>
            <dd>
                <p>
                    If the optional <var>$mode</var> parameter is set to
                    <code>COUNT_RECURSIVE</code> (or 1), <strong>count()</strong>
                    will recursively count the array.  This is particularly useful for
                    counting all the elements of a multidimensional array.
                </p>
                <div class="caution">
                    <strong>Caution</strong><br/>
                    <strong>count()</strong> can detect recursion to avoid an infinite loop, but will emit
                    an <code>E_WARNING</code> every time it does (in case the array contains itself more
                    than once) and return a count higher than may be expected.
                </div>
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The number of elements in <var>$scalarObject->val</var>.</p>
        <!-- other type of return value is not relevant -->
        <!-- caution is not relevant -->
    </div>

    <div class="examples">
        <p><strong>Example #1 count() example</strong></p>
        <pre class="php-code">
            $a[0] = 1;
            $a[1] = 3;
            $a[2] = 5;
            $result = count($a); // $result == 3

            $b[0]  = 7;
            $b[5]  = 9;
            $b[10] = 11;

            $result = count($b); // $result == 3
            $result = count(null); // $result == 0
            $result = count(false); // $result == 1
        </pre>

        <p><strong>Example #2 Recursive count() example</strong></p>
        <pre class="php-code">
            $food = [
                "fruits" => ["orange", "banana", "apple"],
                "veggie" => ["carrot", "collard", "pea"],
            ];

            // recursive count
            echo count($food, COUNT_RECURSIVE); // output 8

            // normal count
            echo count($food); // output 2
        </pre>
    </div>
</div>
</body>
