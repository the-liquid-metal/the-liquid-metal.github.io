<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="short-description">
  <code>baseConvert( int <var>$fromBase</var>, int <var>$toBase</var> ): string</code>
  <p>
    Context: string.<br/>
    Alias of <a href="http://php.net/manual/en/function.base-convert.php">base_convert</a>.<br/>
    Convert a number between arbitrary bases.
  </p>
</div>
<div class="ajax-area">
  <h1>baseConvert</h1>

  <div>
    <p>
      Returns a string containing <code>number</code> represented in base <var>$toBase</var>.
      The base in which <var>$scalarObject->val</var> is given is specified in <var>$fromBase</var>.
      Both <var>$fromBase</var> and <var>$toBase</var> have to be between 2 and 36, inclusive.
      Digits in numbers with a base higher than 10 will be represented with the letters a-z,
      with a meaning 10, b meaning 11 and z meaning 35.
    </p>

    <div class="warning">
      <strong>Warning</strong><br/>
      <strong>baseConvert()</strong> may lose precision on large numbers due to properties
      related to the internal "double" or "float" type used. Please see the Floating point
      numbers section in the manual for more specific information and limitations.
    </div>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$fromBase</dt>
      <dd>The base <code>number</code> is in</dd>

      <dt>$toBase</dt>
      <dd>The base to convert <code>number</code> to</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>The converted <var>$scalarObject->val</var> to <var>$toBase</var>.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 baseConvert() example</strong></p>
    <pre class="php-code">
      <?php
      $hexadecimal = 'A37334';
      echo baseConvert($hexadecimal, 16, 2);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      101000110111001100110100
    </pre>
  </div>
</div>
</body>
