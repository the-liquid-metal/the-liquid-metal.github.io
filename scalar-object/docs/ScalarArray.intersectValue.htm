<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>intersectValue</h1>

    <div class="short-description">
        <code>intersectValue (callable|int <var>$valComparator</var>, callable|int <var>$keyComparator</var>, iterable ...<var>$arrays</var>): ScalarArray|ObjectArray</code>
        <p>
            Compute intersection of values, considering keys or not.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-intersect.php">array_intersect</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-intersect-assoc.php">array_intersect_assoc</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-intersect-uassoc.php">array_intersect_uassoc</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-uintersect.php">array_uintersect</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-uintersect-assoc.php">array_uintersect_assoc</a>&nbsp;
            <a target="_blank" href="http://php.net/manual/en/function.array-uintersect-uassoc.php">array_uintersect_uassoc</a>.<br/>
        </p>
    </div>

    <div>
        <strong>intersect()</strong> returns an array containing all the values of
        <em>internal array</em> that are present in all the arguments. Note
        that keys are preserved.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>An array to compare values against.</dd>

        <dt>...</dt>
        <dd>A variable list of arrays to compare.</dd>
    </dl>

    <h3>Return Values</h3>
    <p>
        Array containing all of the values in <em>internal array</em>
        whose values exist in all of the parameters.
    </p>

    <blockquote>
        <strong>Note</strong>: Two elements are considered equal if and only if <em>(string)
        $elem1 === (string) $elem2</em>. In words: when the string representation is the same.
    </blockquote>

    <h2>assocIntersect</h2>

    <div>
        <strong>assocIntersect()</strong> returns an array containing all the values of
        <em>internal array</em> that are present in all the arguments. Note that the keys are used
        in the comparison unlike in <a href="intersect.htm">intersect()</a>.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>An array to compare values against.</dd>

        <dt>...</dt>
        <dd>A variable list of arrays to compare.</dd>
    </dl>

    <h3>Return Values</h3>
    <p>
        An associative array containing all the values in
        <em>internal array</em> that are present in all of the arguments.
    </p>

    <p>
        In our example you see that only the pair <code>"a" => "green"</code> is present in both arrays
        and thus is returned. The value <em>"red"</em> is not returned because in <em>internal array</em>
        its key is <em>0</em> while the key of "red" in <var>$array2</var> is <em>1</em>, and the key
        <em>"b"</em> is not returned because its values are different in each array.
    </p>

    <p>
        The two values from the <em>key => value</em> pairs are considered equal only if
        <code>(string) $elem1 === (string) $elem2 </code>. In other words a strict type check is
        executed so the string representation must be the same.
    </p>

    <h2>userAssocIntersect</h2>

    <div>
        <strong>userAssocIntersect()</strong> returns an array containing all the values of
        <em>internal array</em> that are present in all the arguments. Note that the keys are used in
        the comparison unlike in <a href="intersect.htm">intersect()</a>.
    </div>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>First array to compare keys against.</dd>

        <dt>...</dt>
        <dd>Variable list of array arguments to compare values against.</dd>

        <dt>$keyComparator</dt>
        <dd>
            The comparison function must return an integer less than, equal to, or greater than zero if the
            first argument is considered to be respectively less than, equal to, or greater than the second.
        </dd>
    </dl>

    <div>
        <h3>Return Values</h3>
        <p>Returns the values of <em>internal array</em> whose values exist in all of the arguments.</p>
    </div>

    <h2>userIntersect</h2>

    <div>Computes the intersection of arrays, compares data by a callback function.</div>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>The second array.</dd>

        <dt>...</dt>
        <dd>More arrays to compare against</dd>

        <dt>$valueComparator</dt>
        <dd>
            The comparison function must return an integer less than, equal to, or greater than zero if
            the first argument is considered to be respectively less than, equal to, or greater than the second.
        </dd>
    </dl>

    <h3>Return Values</h3>
    <p>An array containing all the values of <em>internal array</em> that are present in all the arguments.</p>

    <h2>userIntersectAssoc</h2>

    <p>
        Computes the intersection of arrays with additional index check, compares
        data by a callback function.
    </p>
    <p>
        Note that the keys are used in the comparison unlike in
        <a href="userIntersect.htm">userIntersect()</a>.
        The data is compared by using a callback function.
    </p>

    <h3>Parameters</h3>
    <dl>
        <dt>array2</dt>
        <dd>The second array.</dd>

        <dt>...</dt>
        <dd>More arrays to compare against</dd>

        <dt>$valueComparator</dt>
        <dd>
            The comparison function must return an integer less than, equal to, or greater than zero if
            the first argument is considered to be respectively less than, equal to, or greater than the second.
        </dd>
    </dl>

    <h3>Return Values</h3>
    <p>Returns an array containing all the values of <em>internal array</em> that are present in all the arguments.</p>

    <h2>userIntersectUserAssoc</h2>

    <h3>Parameters</h3>
    <dl>
        <dt>$array2</dt>
        <dd>The second array.</dd>

        <dt>...</dt>
        <dd>More arrays to compare against</dd>

        <dt>$valueComparator</dt>
        <dd>
            The comparison function must return an integer less than, equal to, or greater than zero if the
            first argument is considered to be respectively less than, equal to, or greater than the second.
        </dd>

        <dt>$keyComparator</dt>
        <dd>Key comparison callback function.</dd>
    </dl>

    <h3>Return Values</h3>
    <p>An array containing all the values of <em>internal array</em> that are present in all the arguments.</p>

    <pre class="php-code">
        $arr1 = ["a" => "green", "b" => "brown", "c" => "blue", "red"];
        $arr2 = ["b" => "green", "yellow", "red"];
        $arr3 = ["a" => "green", "b" => "yellow", "blue", "red"];
        $arr4 = ["a" => "GREEN", "B" => "brown", "yellow", "red"];

        $sa = new ScalarArray("string", false, $arr1);
        $sa->intersectValue(BUILDIN_VALUE_COMPARATOR, IGNORE_KEY_COMPARATOR, $arr2);  // output: ["a" => "green", 0 => "red"]
        $sa->intersectValue(BUILDIN_VALUE_COMPARATOR, BUILDIN_KEY_COMPARATOR, $arr3); // output: ["a" => "green"]
        $sa->intersectValue(BUILDIN_VALUE_COMPARATOR, "strcasecmp", $arr4);           // output: ["b" => "brown"]
        $sa->intersectValue("strcasecmp", IGNORE_KEY_COMPARATOR, $arr4);              // output: ["a" => "green", "b" => "brown", 0 => "red"]
        $sa->intersectValue("strcasecmp", BUILDIN_KEY_COMPARATOR, $arr4);             // output: ["a" => "green"]
        $sa->intersectValue("strcasecmp", "strcasecmp", $arr4);                       // output: ["a" => "green", "b" => "brown"]
    </pre>
</div>
</body>
