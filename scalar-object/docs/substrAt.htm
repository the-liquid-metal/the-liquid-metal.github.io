<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>substrAt</h1>

  <div>
    Returns the portion of <code>string</code> specified by the
    <code>start</code> and <code>length</code> parameters.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>string</dt>
      <dd>The input string. Must be one character or longer.</dd>

      <dt>start</dt>
      <dd>
        <p>
          If <code>start</code> is non-negative, the returned string will start at the
          <code>start</code>'th position in <code>string</code>, counting from zero. For
          instance, in the string '<em>abcdef</em>', the character at position <em>0</em>
          is '<em>a</em>', the character at position <em>2</em> is '<em>c</em>', and so forth.
        </p>
        <p>
          If <code>start</code> is negative, the returned string will start at the
          <code>start</code>'th character from the end of <code>string</code>.
        </p>
        <p>
          If <code>string</code> is less than
          <code>start</code> characters long, <code>FALSE</code> will be returned.
        </p>

        <p><strong>Example #1 Using a negative <code>start</code></strong></p>
        <pre class="php-code">
          <?php
          $rest = substrAt("abcdef", -1);    // returns "f"
          $rest = substrAt("abcdef", -2);    // returns "ef"
          $rest = substrAt("abcdef", -3, 1); // returns "d"
          ?>
        </pre>
      </dd>

      <dt>length</dt>
      <dd>
        <p>
          If <code>length</code> is given and is positive, the string
          returned will contain at most <code>length</code> characters
          beginning from <code>start</code> (depending on the length of
          <code>string</code>).
        </p>
        <p>
          If <code>length</code> is given and is negative, then that many characters will be
          omitted from the end of <code>string</code> (after the start position has been
          calculated when a <code>start</code> is negative). If <code>start</code> denotes
          the position of this truncation or beyond, <code>FALSE</code> will be returned.
        </p>
        <p>
          If <code>length</code> is given and is <em>0</em>,
          <code>FALSE</code> or <code>NULL</code>, an empty string will be returned.
        </p>
        <p>
          If <code>length</code> is omitted, the substring starting from
          <code>start</code> until the end of the string will be returned.
        </p>

        <p><strong>Example #2 Using a negative <code>length</code></strong></p>
        <pre class="php-code">
          <?php
          $rest = substrAt("abcdef", 0, -1);  // returns "abcde"
          $rest = substrAt("abcdef", 2, -1);  // returns "cde"
          $rest = substrAt("abcdef", 4, -4);  // returns false
          $rest = substrAt("abcdef", -3, -1); // returns "de"
          ?>
        </pre>
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the extracted part of <code>string</code>;  or <code>FALSE</code>
      on failure, or an empty string.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #3 Basic substrAt() usage</strong></p>
    <pre class="php-code">
      <?php
      echo substrAt('abcdef', 1);     // bcdef
      echo substrAt('abcdef', 1, 3);  // bcd
      echo substrAt('abcdef', 0, 4);  // abcd
      echo substrAt('abcdef', 0, 8);  // abcdef
      echo substrAt('abcdef', -1, 1); // f

      // Accessing single characters in a string
      // can also be achieved using "square brackets"
      $string = 'abcdef';
      echo $string[0];                 // a
      echo $string[3];                 // d
      echo $string[strlen($string)-1]; // f
      ?>
    </pre>

    <p><strong>Example #4 substrAt() casting behaviour</strong></p>
    <pre class="php-code">
      <?php
      class apple {
          public function __toString() {
              return "green";
          }
      }

      echo "1) ".var_export(substrAt("pear", 0, 2), true).PHP_EOL;
      echo "2) ".var_export(substrAt(54321, 0, 2), true).PHP_EOL;
      echo "3) ".var_export(substrAt(new apple(), 0, 2), true).PHP_EOL;
      echo "4) ".var_export(substrAt(true, 0, 1), true).PHP_EOL;
      echo "5) ".var_export(substrAt(false, 0, 1), true).PHP_EOL;
      echo "6) ".var_export(substrAt("", 0, 1), true).PHP_EOL;
      echo "7) ".var_export(substrAt(1.2e3, 0, 4), true).PHP_EOL;
      ?>
    </pre>

    <div>Output of the above example in PHP 7:</div>
    <pre class="output">
      1) 'pe'
      2) '54'
      3) 'gr'
      4) '1'
      5) ''
      6) ''
      7) '1200'
    </pre>

    <div>Output of the above example in PHP 5:</div>
    <pre class="output">
      1) 'pe'
      2) '54'
      3) 'gr'
      4) '1'
      5) false
      6) false
      7) '1200'
    </pre>
  </div>

  <div>
    <h3>Errors/Exceptions</h3>
    <p>Returns <code>FALSE</code> on error.</p>
    <pre class="php-code">
      <?php
      var_dump(substrAt('a', 2)); // bool(false)
      ?>
    </pre>   
  </div>
</div>
</body>
