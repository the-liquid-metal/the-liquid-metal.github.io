
 <div>
  <h1>tokenize</h1>
 </div>

 <div>
  <p>
   <span><strong>tokenize()</strong></span> splits a string (<code class="parameter">str</code>)
   into smaller strings (tokens), with each token being delimited by any
   character from <code class="parameter">token</code>.
   That is, if you have a string like &quot;This is an example string&quot; you
   could tokenize this string into its individual words by using the
   space character as the token.
  </p>
  <p>
   Note that only the first call to tokenize uses the string argument.
   Every subsequent call to tokenize only needs the token to use, as
   it keeps track of where it is in the current string.  To start
   over, or to tokenize a new string you simply call tokenize with the
   string argument again to initialize it.  Note that you may put
   multiple tokens in the token parameter.  The string will be
   tokenized when any one of the characters in the argument are
   found.
  </p>
 </div>

 <div class="parameters">
  <h3>Parameters</h3>
  <p>
   <dl>

     <dt>
<code class="parameter">str</code></dt>

     <dd>

      <p>
       The <span><a href="language.types.string.php" class="type string">string</a></span> being split up into smaller strings (tokens).
      </p>
     </dd>

     <dt>
<code class="parameter">token</code></dt>

     <dd>

      <p>
       The delimiter used when splitting up <code class="parameter">str</code>.
      </p>
     </dd>

   </dl>

  </p>
 </div>

 <div class="returnvalues">
  <h3>Return Values</h3>
  <p>
   A <span><a href="language.types.string.php" class="type string">string</a></span> token.
  </p>
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 <span><strong>tokenize()</strong></span> example</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$string&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #DD0000">"This&nbsp;is\tan&nbsp;example\nstring"</span><span style="color: #007700">;<br /></span><span style="color: #FF8000">/*&nbsp;Use&nbsp;tab&nbsp;and&nbsp;newline&nbsp;as&nbsp;tokenizing&nbsp;characters&nbsp;as&nbsp;well&nbsp;&nbsp;*/<br /></span><span style="color: #0000BB">$tok&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">tokenize</span><span style="color: #007700">(</span><span style="color: #0000BB">$string</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"&nbsp;\n\t"</span><span style="color: #007700">);<br /><br />while&nbsp;(</span><span style="color: #0000BB">$tok&nbsp;</span><span style="color: #007700">!==&nbsp;</span><span style="color: #0000BB">false</span><span style="color: #007700">)&nbsp;{<br />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</span><span style="color: #DD0000">"Word=</span><span style="color: #0000BB">$tok</span><span style="color: #DD0000">&lt;br&nbsp;/&gt;"</span><span style="color: #007700">;<br />&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #0000BB">$tok&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">tokenize</span><span style="color: #007700">(</span><span style="color: #DD0000">"&nbsp;\n\t"</span><span style="color: #007700">);<br />}<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

   </div>
  </p> 
  <p>
   The behavior when an empty part was found changed with PHP 4.1.0. The old
   behavior returned an empty string, while the new, correct, behavior
   simply skips the part of the string:
  </p>
  <p>
   <div>
    <p><strong>Example #2 Old <span><strong>tokenize()</strong></span> behavior</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$first_token&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">tokenize</span><span style="color: #007700">(</span><span style="color: #DD0000">'/something'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$second_token&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">tokenize</span><span style="color: #007700">(</span><span style="color: #DD0000">'/'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$first_token</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$second_token</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
    string(0) &quot;&quot;
    string(9) &quot;something&quot;
</pre></div>
    </div>
   </div>
   <div>
    <p><strong>Example #3 New <span><strong>tokenize()</strong></span> behavior</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$first_token&nbsp;&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">tokenize</span><span style="color: #007700">(</span><span style="color: #DD0000">'/something'</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">'/'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$second_token&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">tokenize</span><span style="color: #007700">(</span><span style="color: #DD0000">'/'</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">$first_token</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$second_token</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
    string(9) &quot;something&quot;
    bool(false)
</pre></div>
    </div>
   </div>
  </p>
 </div>

 <div>

  <div class="warning"><strong class="warning">Warning</strong><p>This function may
return Boolean <strong><code>FALSE</code></strong>, but may also return a non-Boolean value which
evaluates to <strong><code>FALSE</code></strong>. Please read the section on <a href="language.types.boolean.php" class="link">Booleans</a> for more
information. Use <a href="language.operators.comparison.php" class="link">the ===
operator</a> for testing the return value of this
function.</p></div>
 </div>
