<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>combine</h1>

  <div>
    Creates an <a href="language.types.array.php">array</a> by using the
    values from the <code>keys</code> array as keys and the values from the
    <code>values</code> array as the corresponding values.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>keys</dt>
      <dd>
        Array of keys to be used. Illegal values for key will be
        converted to <a href="language.types.string.php">string</a>.
      </dd>

      <dt>values</dt>
      <dd>Array of values to be used</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns the combined <a href="language.types.array.php">array</a>, <code>FALSE</code>
      if the number of elements for each array isn't equal.
    </p>
  </div>

  <div>
    <h3>Errors/Exceptions</h3>
    <p>
      Throws <code>E_WARNING</code> if the number of elements in
      <code>keys</code> and <code>values</code> does not match.
    </p>
  </div>

 <div class="examples">
    <p><strong>Example #1 A simple combine() example</strong></p>
    <pre class="php-code">
      <?php
      $a = array('green', 'red', 'yellow');
      $b = array('avocado', 'apple', 'banana');
      $c = combine($a, $b);

      print_r($c);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [green]  => avocado
          [red]    => apple
          [yellow] => banana
      )
    </pre>
  </div>
</div>
</body>
