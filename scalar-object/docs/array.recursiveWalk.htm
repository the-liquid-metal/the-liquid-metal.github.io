<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>recursiveWalk</h1>

  <div class="short-description">
    <code>recursiveWalk( callable <var>$callback</var>, mixed <var>$userData</var> = NULL ): array</code>
    <p>
      Context: array.<br/>
      Alias of <a href="http://php.net/manual/en/function.array-walk-recursive.php">array_walk_recursive</a>.<br/>
      Apply a callback function recursively to every elements.
    </p>
  </div>

  <div>
    Applies the user-defined <var>$callback</var> function to each
    element of the <var>$scalarObject->val</var>. This function will recurse
    into deeper arrays.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>$callback</dt>
      <dd>
        <p>
          Typically, <var>$callback</var> takes on two parameters. The <var>$scalarObject->val</var>
          parameter's value being the first, and the key/index second.
        </p>
        <blockquote>
          <strong>Note</strong>: If <var>$callback</var> needs to be working with the
          actual values of the array, specify the first parameter of <var>$callback</var>
          as a reference. Then, any changes made to
          those elements will be made in the original array itself.
        </blockquote>
      </dd>

      <dt>userdata</dt>
      <dd>
        If supplied, it will be passed as the
        third parameter to the <var>$callback</var>.
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns <code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 recursiveWalk() example</strong></p>
    <pre class="php-code">
      <?php
      $sweet = array('a' => 'apple', 'b' => 'banana');
      $fruits = array('sweet' => $sweet, 'sour' => 'lemon');

      function test_print($item, $key)
      {
          echo "$key holds $item\n";
      }

      recursiveWalk($fruits, 'test_print');
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      a holds apple
      b holds banana
      sour holds lemon
    </pre>

    <div>
      You may notice that the key '<em>sweet</em>' is never displayed. Any key that holds an
      array will not be passed to the function.
    </div>
  </div>
</div>
</body>
