<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>pow</h1>

  <div>
    <p>Returns <code>base</code> raised to the power of<code>exp</code>.</p>
    <blockquote>
      <strong>Note</strong>: In PHP 5.6 onwards, you may prefer to use the
      <a href="language.operators.arithmetic.php">**</a> operator.
    </blockquote>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>base</dt>
      <dd>The base to use</dd>

      <dt>exp</dt>
      <dd>The exponent</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      <code>base</code> raised to the power of <code>exp</code>. If both arguments are
      non-negative integers and the result can be represented as an integer, the result
      will be returned with <a href="language.types.integer.php">integer</a> type, 
      otherwise it will be returned as a <a href="language.types.float.php">float</a>.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 Some examples of <strong>pow()</strong></strong></p>
    <pre class="php-code">
      <?php
      var_dump(pow(2, 8)); // int(256)
      echo pow(-1, 20); // 1
      echo pow(0, 0); // 1

      echo pow(-1, 5.5); // PHP >4.0.6  NAN
      echo pow(-1, 5.5); // PHP &lt;=4.0.6 1.#IND
      ?>
    </pre>
  </div>

  <blockquote>
    <strong>Note</strong>: This function will convert all input to a number,
    even non-scalar values, which could lead to <em>weird</em> results.
  </blockquote>
</div>
</body>
