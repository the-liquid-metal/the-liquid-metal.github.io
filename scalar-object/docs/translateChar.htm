
 <div>
  <h1>translateChar</h1>
 </div>
 
 <div>
  <p>
   If given three arguments, this function returns a copy of
   <code class="parameter">str</code> where all occurrences of each (single-byte)
   character in <code class="parameter">from</code> have been translated to the
   corresponding character in <code class="parameter">to</code>, i.e., every
   occurrence of <em>$from[$n]</em> has been replaced with
   <em>$to[$n]</em>, where <em>$n</em> is a valid
   offset in both arguments.
  </p>
  <p>
   If <code class="parameter">from</code> and <code class="parameter">to</code> have
   different lengths, the extra characters in the longer of the two
   are ignored. The length of <code class="parameter">str</code> will be the same as
   the return value&#039;s.
  </p>
  <p>
   If given two arguments, the second should be an <span><a href="language.types.array.php" class="type array">array</a></span> in the
   form <em>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</em>. The return value is
   a <span><a href="language.types.string.php" class="type string">string</a></span> where all the occurrences of the array keys have been
   replaced by the corresponding values. The longest keys will be tried first.
   Once a substring has been replaced, its new value will not be searched
   again.
  </p>
  <p>
   In this case, the keys and the values may have any length, provided that
   there is no empty key; additionally, the length of the return value may
   differ from that of <code class="parameter">str</code>.
   However, this function will be the most efficient when all the keys have the
   same size.
  </p>
 </div>


 <div class="parameters">
  <h3>Parameters</h3>
  <p>
   <dl>

    
     <dt>
<code class="parameter">str</code></dt>

     <dd>

      <p>
       The <span><a href="language.types.string.php" class="type string">string</a></span> being translated.
      </p>
     </dd>

    
    
     <dt>
<code class="parameter">from</code></dt>

     <dd>

      <p>
       The <span><a href="language.types.string.php" class="type string">string</a></span> being translated to <code class="parameter">to</code>.
      </p>
     </dd>

    
    
     <dt>
<code class="parameter">to</code></dt>

     <dd>

      <p>
       The <span><a href="language.types.string.php" class="type string">string</a></span> replacing <code class="parameter">from</code>.
      </p>
     </dd>

    
    
     <dt>
<code class="parameter">replace_pairs</code></dt>

     <dd>

      <p>
       The <code class="parameter">replace_pairs</code> parameter may be used instead of 
       <code class="parameter">to</code> and <code class="parameter">from</code>, in which case it&#039;s an
       <span><a href="language.types.array.php" class="type array">array</a></span> in the form <em>array(&#039;from&#039; =&gt; &#039;to&#039;, ...)</em>. 
      </p>
     </dd>

    
   </dl>

  </p>
 </div>

 
 <div class="returnvalues">
  <h3>Return Values</h3>
  <p>
   Returns the translated <span><a href="language.types.string.php" class="type string">string</a></span>.
  </p>
  <p>
   If <code class="parameter">replace_pairs</code> contains a key which
   is an empty <span><a href="language.types.string.php" class="type string">string</a></span> (<em>&quot;&quot;</em>),
   <strong><code>FALSE</code></strong> will be returned. If the <code class="parameter">str</code> is not a scalar
   then it is not typecasted into a string, instead a warning is raised and 
   <strong><code>NULL</code></strong> is returned. 
  </p>
 </div>


 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 <span><strong>translateChar()</strong></span> example</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #FF8000">//In&nbsp;this&nbsp;form,&nbsp;translateChar()&nbsp;does&nbsp;byte-by-byte&nbsp;translation<br />//Therefore,&nbsp;we&nbsp;are&nbsp;assuming&nbsp;a&nbsp;single-byte&nbsp;encoding&nbsp;here:<br /></span><span style="color: #0000BB">$addr&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">translateChar</span><span style="color: #007700">(</span><span style="color: #0000BB">$addr</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"äåö"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"aao"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

   </div>
  </p>
  <p>
   The next example shows the behavior of <span><strong>translateChar()</strong></span> when
   called with only two arguments. Note the preference of the replacements
   (<em>&quot;h&quot;</em> is not picked because there are longer matches)
   and how replaced text was not searched again.
  </p>
  <div>
   <p><strong>Example #2 <span><strong>translateChar()</strong></span> example with two arguments</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$trans&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"h"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"-"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"hello"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"hi"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"hi"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"hello"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #0000BB">translateChar</span><span style="color: #007700">(</span><span style="color: #DD0000">"hi&nbsp;all,&nbsp;I&nbsp;said&nbsp;hello"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$trans</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
hello all, I said hi
</pre></div>
    </div>
  </div>
  <p>
   The two modes of behavior are substantially different. With three arguments,
   <span><strong>translateChar()</strong></span> will replace bytes; with two, it may replace
   longer substrings.
  </p>
  <div>
   <p><strong>Example #3 <span><strong>translateChar()</strong></span> behavior comparison</strong></p>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /></span><span style="color: #007700">echo&nbsp;</span><span style="color: #0000BB">translateChar</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"ab"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"01"</span><span style="color: #007700">),</span><span style="color: #DD0000">"\n"</span><span style="color: #007700">;<br /><br /></span><span style="color: #0000BB">$trans&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"ab"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"01"</span><span style="color: #007700">);<br />echo&nbsp;</span><span style="color: #0000BB">translateChar</span><span style="color: #007700">(</span><span style="color: #DD0000">"baab"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$trans</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
1001
ba01
</pre></div>
    </div>
  </div>
 </div>
