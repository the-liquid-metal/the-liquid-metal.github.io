<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>sort</h1>

  <div>
    This function sorts an array.  Elements will be arranged from
    lowest to highest when this function has completed.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>array</dt>
      <dd>The input array.</dd>

      <dt>sort_flags</dt>
      <dd>
        <p>
          The optional second parameter <code>sort_flags</code>
          may be used to modify the sorting behavior using these values:
        </p>
        <p>Sorting type flags:</p>
        <ul>
          <li><code>SORT_REGULAR</code> - compare items normally (don't change types)</li>
          <li><code>SORT_NUMERIC</code> - compare items numerically</li>
          <li><code>SORT_STRING</code> - compare items as strings</li>
          <li>
            <code>SORT_LOCALE_STRING</code> - compare items as strings,
            based on the current locale. It uses the locale, which can
            be changed using <a href="function.setlocale.php">setlocale()</a>
          </li>
          <li>
            <code>SORT_NATURAL</code> - compare items as strings
            using "natural ordering" like <a href="function.natsort.php">natsort()</a>
          </li>
          <li>
            <code>SORT_FLAG_CASE</code> - can be combined
            (bitwise OR) with
            <code>SORT_STRING</code> or
           <code>SORT_NATURAL</code> to sort strings case-insensitively
          </li>
        </ul>
      </dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns <code>TRUE</code> on success or <code>FALSE</code> on failure.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 sort() example</strong></p>
    <pre class="php-code">
      <?php
      $fruits = array("lemon", "orange", "banana", "apple");
      sort($fruits);
      foreach ($fruits as $key => $val) {
          echo "fruits[" . $key . "] = " . $val . "\n";
      }
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      fruits[0] = apple
      fruits[1] = banana
      fruits[2] = lemon
      fruits[3] = orange
    </pre>

    <p>The fruits have been sorted in alphabetical order.</p>
    <p><strong>Example #2 <strong>sort()</strong> example using case-insensitive natural ordering</strong></p>
    <pre class="php-code">
      <?php
      $fruits = array(
          "Orange1", "orange2", "Orange3", "orange20"
      );
      sort($fruits, SORT_NATURAL | SORT_FLAG_CASE);
      foreach ($fruits as $key => $val) {
          echo "fruits[" . $key . "] = " . $val . "\n";
      }
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      fruits[0] = Orange1
      fruits[1] = orange2
      fruits[2] = Orange3
      fruits[3] = orange20
    </pre>

    <p>The fruits have been sorted like <a href="function.natcasesort.php">natcasesort()</a>.</p>
  </div>

  <blockquote>
    <strong>Note</strong>: This function assigns new keys to the elements in
    <code>array</code>. It will remove any existing keys that may have been
    assigned, rather than just reordering the keys.
  </blockquote>

  <blockquote>
    <strong>Note</strong>: Like most PHP sorting functions, <strong>sort()</strong> uses an
    implementation of <a href="http://en.wikipedia.org/wiki/Quicksort">&raquo; Quicksort</a>.
    The pivot is chosen in the middle of the partition resulting in an optimal time for already
    sorted arrays. This is however an implementation detail you shouldn't rely on.
   </blockquote>

  <div class="warning">
    <strong>Warning</strong><br/>
    Be careful when sorting arrays with mixed types values because
    <strong>sort()</strong> can produce unpredictable results.
  </div>
</div>
</body>
