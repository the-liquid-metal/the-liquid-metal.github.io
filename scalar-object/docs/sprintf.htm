<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>sprintf</h1>

  <div>Returns a string produced according to the formatting string <code>format</code>.</div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>format</dt>
      <dd>
        <p>The format string is composed of zero or more directives:
          ordinary characters (excluding <em>%</em>) that are
          copied directly to the result, and <em>conversion
          specifications</em>, each of which results in fetching its
          own parameter.  This applies to both <strong>sprintf()</strong>
          and <a href="function.printf.php">printf()</a>.
        </p>
        <p>
          Each conversion specification consists of a percent sign
          (<em>%</em>), followed by one or more of these
          elements, in order:
        </p>
        <ol type="1">
          <li>
            An optional <em>sign specifier</em> that forces a sign
            (- or +) to be used on a number. By default, only the - sign is used
            on a number if it's negative. This specifier forces positive numbers
            to have the + sign attached as well, and was added in PHP 4.3.0.
          </li>
          <li>
            An optional <em>padding specifier</em> that says
            what character will be used for padding the results to the
            right string size.  This may be a space character or a
            <em>0</em> (zero character).  The default is to pad
            with spaces.  An alternate padding character can be specified
            by prefixing it with a single quote (<em>'</em>).
            See the examples below.
          </li>
          <li>
            An optional <em>alignment specifier</em> that says
            if the result should be left-justified or right-justified.
            The default is right-justified; a <em>-</em>
            character here will make it left-justified.
          </li>
          <li>
            An optional number, a <em>width specifier</em> that says how many
            characters (minimum) this conversion should result in.
          </li>
          <li>
            An optional <em>precision specifier</em> in the form
            of a period (<em>.</em>) followed by an optional decimal digit string
            that says how many decimal digits should be displayed for
            floating-point numbers. When using this specifier on a string,
            it acts as a cutoff point, setting a maximum character limit to
            the string. Additionally, the character to use when padding a
            number may optionally be specified between the period and the
            digit.
          </li>
          <li>
            <p>
              A <em>type specifier</em> that says what type the
              argument data should be treated as.  Possible types:
            </p>
            <ul>
              <li>
                <em>%</em> - a literal percent character. No argument is required.
              </li>
              <li>
                <em>b</em> - the argument is treated as an
                integer, and presented as a binary number.
              </li>
              <li>
                <em>c</em> - the argument is treated as an
                integer, and presented as the character with that ASCII
                value.
              </li>
              <li>
                <em>d</em> - the argument is treated as an
                integer, and presented as a (signed) decimal number.
              </li>
              <li>
                <em>e</em> - the argument is treated as scientific
                notation (e.g. 1.2e+2).
                The precision specifier stands for the number of digits after the
                decimal point since PHP 5.2.1. In earlier versions, it was taken as
                number of significant digits (one less).
              </li>
              <li>
                <em>E</em> - like <em>%e</em> but uses uppercase letter (e.g. 1.2E+2).
              </li>
              <li>
                <em>f</em> - the argument is treated as a
                float, and presented as a floating-point number (locale aware).
              </li>
              <li>
                <em>F</em> - the argument is treated as a
                float, and presented as a floating-point number (non-locale aware).
                Available since PHP 4.3.10 and PHP 5.0.3.
              </li>
              <li>
                <em>g</em> - shorter of <em>%e</em> and <em>%f</em>.
              </li>
              <li>
                <em>G</em> - shorter of <em>%E</em> and <em>%f</em>.
              </li>
              <li>
                <em>o</em> - the argument is treated as an
                integer, and presented as an octal number.
              </li>
              <li>
                <em>s</em> - the argument is treated as and presented as a string.
              </li>
              <li>
                <em>u</em> - the argument is treated as an
                integer, and presented as an unsigned decimal number.
              </li>
              <li>
                <em>x</em> - the argument is treated as an integer
                and presented as a hexadecimal number (with lowercase
                letters).
              </li>
              <li>
                <em>X</em> - the argument is treated as an integer
                and presented as a hexadecimal number (with uppercase
                letters).
              </li>
            </ul>
          </li>
        </ol>

        <p>Variables will be co-erced to a suitable type for the specifier:</p>
        <table class="table">
          <caption><strong>Type Handling</strong></caption>
          <thead>
            <tr>
              <th>Type</th>
              <th>Specifiers</th>
            </tr>
          </thead>

          <tbody>
            <tr>
              <td><em>string</em></td>
              <td><em>s</em></td>
            </tr>

            <tr>
              <td><em>integer</em></td>
              <td><em>d</em>, <em>u</em>, <em>c</em>, <em>o</em>, <em>x</em>, <em>X</em>, <em>b</em></td>
            </tr>

            <tr>
              <td><em>double</em></td>
              <td><em>g</em>, <em>G</em>, <em>e</em>, <em>E</em>, <em>f</em>, <em>F</em> </td>
            </tr>
          </tbody>
        </table>

        <div class="warning">
          <strong>Warning</strong><br/>
          Attempting to use a combination of the string and width specifiers with character sets
          that require more than one byte per character may result in unexpected results
        </div>

        <p>The format string supports argument numbering/swapping. Here is an example:</p>
        <div>
          <p><strong>Example #1 Argument swapping</strong></p>
          <pre class="php-code">
            <?php
            $num = 5;
            $location = 'tree';

            $format = 'There are %d monkeys in the %s';
            echo sprintf($format, $num, $location);
            ?>
          </pre>
        </div>
        <div>
          This will output "There are 5 monkeys in the tree".  But
          imagine we are creating a format string in a separate file,
          commonly because we would like to internationalize it and we
          rewrite it as:
        </div>
        <p><strong>Example #2 Argument swapping</strong></p>
        <pre class="php-code">
          <?php
          $format = 'The %s contains %d monkeys';
          echo sprintf($format, $num, $location);
          ?>
        </pre>

        <div>
          We now have a problem.  The order of the placeholders in the
          format string does not match the order of the arguments in the
          code.  We would like to leave the code as is and simply indicate
          in the format string which arguments the placeholders refer to.
          We would write the format string like this instead:
        </div>

        <p><strong>Example #3 Argument swapping</strong></p>
        <pre class="php-code">
          <?php
          $format = 'The %2$s contains %1$d monkeys';
          echo sprintf($format, $num, $location);
          ?>
        </pre>

        <div>
          An added benefit here is that you can repeat the placeholders without
          adding more arguments in the code.  For example:
        </div>

        <p><strong>Example #4 Argument swapping</strong></p>
        <pre class="php-code">
          <?php
          $format = 'The %2$s contains %1$d monkeys.
                     That\'s a nice %2$s full of %1$d monkeys.';
          echo sprintf($format, $num, $location);
          ?>
        </pre>

        <div>
          When using argument swapping, the <em>n$</em>
          <em>position specifier</em> must come immediately
          after the percent sign (<em>%</em>), before any other
          specifiers, as shown in the example below.
        </div>

        <p><strong>Example #5 Specifying padding character</strong></p>
        <pre class="php-code">
          <?php
          echo sprintf("%'.9d\n", 123);
          echo sprintf("%'.09d\n", 123);
          ?>
        </pre>

        <div>The above example will output:</div>
        <pre class="output">
          ......123
          000000123
        </pre>

        <p><strong>Example #6 Position specifier with other specifiers</strong></p>
        <pre class="php-code">
          <?php
          $format = 'The %2$s contains %1$04d monkeys';
          echo sprintf($format, $num, $location);
          ?>
        </pre>

        <div>The above example will output:</div>
        <pre class="output">The tree contains 0005 monkeys</pre>

        <blockquote>
          <strong>Note</strong>: Attempting to use a position specifier greater than
          <code>PHP_INT_MAX</code> will result in <strong>sprintf()</strong> generating warnings.
        </blockquote>

        <div class="warning">
          <strong>Warning</strong><br/>
          The <em>c</em> type specifier ignores padding and width
        </div>
      </dd>

      <dt>args</dt>
      <dd><p> </p></dd>

      <dt>...</dt>
      <dd><p> </p></dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns a string produced according to the formatting string <code>format</code>.</p>
  </div>

  <div class="examples">
    <p><strong>Example #7 <a href="function.printf.php">printf()</a>: various examples</strong></p>
    <pre class="php-code">
      <?php
      $n =  43951789;
      $u = -43951789;
      $c = 65; // ASCII 65 is 'A'

      // notice the double %%, this prints a literal '%' character
      printf("%%b = '%b'\n", $n); // binary representation
      printf("%%c = '%c'\n", $c); // print the ascii character, same as chr() function
      printf("%%d = '%d'\n", $n); // standard integer representation
      printf("%%e = '%e'\n", $n); // scientific notation
      printf("%%u = '%u'\n", $n); // unsigned integer representation of a positive integer
      printf("%%u = '%u'\n", $u); // unsigned integer representation of a negative integer
      printf("%%f = '%f'\n", $n); // floating point representation
      printf("%%o = '%o'\n", $n); // octal representation
      printf("%%s = '%s'\n", $n); // string representation
      printf("%%x = '%x'\n", $n); // hexadecimal representation (lower-case)
      printf("%%X = '%X'\n", $n); // hexadecimal representation (upper-case)

      printf("%%+d = '%+d'\n", $n); // sign specifier on a positive integer
      printf("%%+d = '%+d'\n", $u); // sign specifier on a negative integer
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      %b = '10100111101010011010101101'
      %c = 'A'
      %d = '43951789'
      %e = '4.39518e+7'
      %u = '43951789'
      %u = '4251015507'
      %f = '43951789.000000'
      %o = '247523255'
      %s = '43951789'
      %x = '29ea6ad'
      %X = '29EA6AD'
      %+d = '+43951789'
      %+d = '-43951789'
    </pre>

    <p><strong>Example #8 <a href="function.printf.php">printf()</a>: string specifiers</strong></p>
    <pre class="php-code">
      <?php
      $s = 'monkey';
      $t = 'many monkeys';

      printf("[%s]\n",      $s); // standard string output
      printf("[%10s]\n",    $s); // right-justification with spaces
      printf("[%-10s]\n",   $s); // left-justification with spaces
      printf("[%010s]\n",   $s); // zero-padding works on strings too
      printf("[%'#10s]\n",  $s); // use the custom padding character '#'
      printf("[%10.10s]\n", $t); // left-justification but with a cutoff of 10 characters
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      [monkey]
      [    monkey]
      [monkey    ]
      [0000monkey]
      [####monkey]
      [many monke]
    </pre>

    <p><strong>Example #9 sprintf(): zero-padded integers</strong></p>
    <pre class="php-code">
      <?php
      $isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
      ?>
    </pre>

    <p><strong>Example #10 sprintf(): formatting currency</strong></p>
    <pre class="php-code">
      <?php
      $money1 = 68.75;
      $money2 = 54.35;
      $money = $money1 + $money2;
      // echo $money will output "123.1";
      $formatted = sprintf("%01.2f", $money);
      // echo $formatted will output "123.10"
      ?>
    </pre>

    <p><strong>Example #11 sprintf(): scientific notation</strong></p>
    <pre class="php-code">
      <?php
      $number = 362525200;
      echo sprintf("%.3e", $number); // outputs 3.625e+8
      ?>
    </pre>
  </div>
</div>
</body>
