
 <div>
  <h1>assocDiff</h1>
 </div>

 <div>
  <p>
   Compares <code>array1</code> against <code>array2</code> and
   returns the difference. Unlike <span><a href="function.array-diff.php" class="function">array_diff()</a></span> the array
   keys are also used in the comparison.
  </p>
 </div>

 <div>
  <h3>Parameters</h3>
  <p>
   <dl>

     <dt>
<code>array1</code></dt>

     <dd>

      <p>
       The array to compare from
      </p>
     </dd>

     <dt>
<code>array2</code></dt>

     <dd>

      <p>
       An array to compare against
      </p>
     </dd>

     <dt>
<code>...</code></dt>

     <dd>

      <p>
       More arrays to compare against
      </p>
     </dd>

   </dl>

  </p>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns an <span><a href="language.types.array.php" class="type array">array</a></span> containing all the values from
   <code>array1</code> that are not present in any of the other arrays.
  </p>
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 <span><strong>assocDiff()</strong></span> example</strong></p>
    <div><p>
     In this example you see the <em>&quot;a&quot; =&gt; &quot;green&quot;</em>
     pair is present in both arrays and thus it is not in the output from the
     function. Unlike this, the pair <em>0 =&gt; &quot;red&quot;</em>
     is in the output because in the second argument <em>&quot;red&quot;</em>
     has key which is <em>1</em>.
    </p></div>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"b"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"brown"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"c"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"blue"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"a"&nbsp;</span><span style="color: #007700">=&gt;&nbsp;</span><span style="color: #DD0000">"green"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"yellow"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"red"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">assocDiff</span><span style="color: #007700">(</span><span style="color: #0000BB">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$array2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$result</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
Array
(
    [b] =&gt; brown
    [c] =&gt; blue
    [0] =&gt; red
)
</pre></div>
    </div>
   </div>
  </p>
  <p>
   <div>
    <p><strong>Example #2 <span><strong>assocDiff()</strong></span> example</strong></p>
    <div><p>
     Two values from <em>key =&gt; value</em> pairs are
     considered equal only if <em>(string) $elem1 === (string)
     $elem2 </em>. In other words a strict check takes place so
     the string representations must be the same.
    </p></div>
    <div>
<div><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br />$array1&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #0000BB">0</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$array2&nbsp;</span><span style="color: #007700">=&nbsp;array(</span><span style="color: #DD0000">"00"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"01"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"2"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">$result&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">assocDiff</span><span style="color: #007700">(</span><span style="color: #0000BB">$array1</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$array2</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">print_r</span><span style="color: #007700">(</span><span style="color: #0000BB">$result</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

    <div><p>The above example will output:</p></div>
    <div>
<div><pre>
Array
(
    [0] =&gt; 0
    [1] =&gt; 1
)
</pre></div>
    </div>
   </div>
  </p>
 </div>

 <div>
  <blockquote><p><strong>Note</strong>: 
   <span>
    This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    <em>assocDiff($array1[0], $array2[0]);</em>.
   </span>
  </p></blockquote>
  <blockquote><p><strong>Note</strong>: 
   <span>
    Ensure you pass arguments in the correct order when comparing similar 
    arrays with more keys. The new array should be the first in the list.
   </span>
  </p></blockquote>
 </div>
