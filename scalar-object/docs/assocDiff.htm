  <h1>assocDiff</h1>

  <div>
    Compares <code>array1</code> against <code>array2</code> and returns the difference. Unlike
    <a href="function.array-diff.php">array_diff()</a> the array keys are also used in the comparison.
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>array1</dt>
      <dd>The array to compare from</dd>

      <dt>array2</dt>
      <dd>An array to compare against</dd>

      <dt>...</dt>
      <dd>More arrays to compare against</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>
      Returns an <a href="language.types.array.php">array</a> containing all the values from
      <code>array1</code> that are not present in any of the other arrays.
    </p>
  </div>

  <div class="examples">
    <p><strong>Example #1 assocDiff() example</strong></p>
    <div>
      In this example you see the <em>"a" => "green"</em> pair is present in both arrays and thus
      it is not in the output from the function. Unlike this, the pair <em>0 => "red"</em> is in
      the output because in the second argument <em>"red"</em> has key which is <em>1</em>.
    </div>
    <pre class="php-code">
      <?php
      $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
      $array2 = array("a" => "green", "yellow", "red");
      $result = assocDiff($array1, $array2);
      print_r($result);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [b] => brown
          [c] => blue
          [0] => red
      )
    </pre>

    <p><strong>Example #2 assocDiff() example</strong></p>
    <div>
      Two values from <em>key => value</em> pairs are considered equal only if <em>(string)
      $elem1 === (string) $elem2 </em>. In other words a strict check takes place so the string
      representations must be the same.
    </div>
    <pre class="php-code">
      <?php
      $array1 = array(0, 1, 2);
      $array2 = array("00", "01", "2");
      $result = assocDiff($array1, $array2);
      print_r($result);
      ?>
    </pre>

    <div>The above example will output:</div>
    <pre class="output">
      Array
      (
          [0] => 0
          [1] => 1
      )
    </pre>

 </div>

  <blockquote>
    <strong>Note</strong>: This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    <em>assocDiff($array1[0], $array2[0]);</em>.
  </blockquote>

  <blockquote>
    <strong>Note</strong>: Ensure you pass arguments in the correct order when comparing
    similar arrays with more keys. The new array should be the first in the list.
  </blockquote>
