<html>
<head>
    <script src="jquery-2.0.3.min.js"></script>
    <script src="jquery.snippet.min.js"></script>
    <script src="individual.js"></script>
    <link rel="stylesheet" href="jquery.snippet.min.css"/>
    <link rel="stylesheet" href="inject.css"/>
    <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
    <h1>reduce</h1>

    <div class="short-description">
        <code>reduce (callable <var>$callback</var>, mixed <var>$initial</var> = null): mixed</code>
        <p>
            Iteratively reduce to a single value using a callback function.<br/><br/>
            see <a target="_blank" href="http://php.net/manual/en/function.array-reduce.php">array_reduce</a>.<br/>
        </p>
    </div>

    <div>
        <strong>reduce()</strong> applies iteratively the <em>internal array</em>
        function to the elements of the <em>internal array</em>, so as to reduce the
        array to a single value.
    </div>

    <div>
        <h3>Parameters</h3>
        <dl>
            <dt>$reducer</dt>
            <dd>
                <dl>
                    <dt>$carry</dt>
                    <dd>
                        Holds the return value of the previous iteration; in the case of the
                        first iteration it instead holds the value of <var>$initial</var>.
                    </dd>

                    <dt>$item</dt>
                    <dd>Holds the value of the current iteration.</dd>
                </dl>
            </dd>

            <dt>$initial</dt>
            <dd>
                If available, it will be used at the beginning of the
                process, or as a final result in case the array is empty.
            </dd>
        </dl>
    </div>

    <div>
        <h3>Return Values</h3>
        <p>The resulting value.</p>
        <p>
            If the array is empty and <var>$initial</var> is not passed,
            <strong>reduce()</strong> returns <code>NULL</code>.
        </p>
    </div>

    <div class="examples">
        <pre class="php-code">
            function sum($carry, $item) {
                return $carry + $item;
            }

            function product($carry, $item) {
                return $carry * $item;
            }

            $a = [1, 2, 3, 4, 5];
            $x = [];

            reduce($a, "sum");                      // output: 15
            reduce($a, "product", 10);              // output: 1200, because: 10*1*2*3*4*5
            reduce($x, "sum", "No data to reduce"); // output: "No data to reduce"
        </pre>
    </div>
</div>
</body>
