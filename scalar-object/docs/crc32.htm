<html>
<head>
  <script src="jquery-2.0.3.min.js"></script>
  <script src="jquery.snippet.min.js"></script>
  <script src="individual.js"></script>
  <link rel="stylesheet" href="jquery.snippet.min.css"/>
  <link rel="stylesheet" href="inject.css"/>
  <link rel="stylesheet" href="individual.css"/>
</head>
<body>
<div class="ajax-area">
  <h1>crc32</h1>

  <div>
    <p>
      Generates the cyclic redundancy checksum polynomial of 32-bit
      lengths of the <code>str</code>. This is usually used
      to validate the integrity of data being transmitted.
    </p>

    <div class="warning">
      <strong>Warning</strong>
      <p>
        Because PHP's integer type is signed many crc32 checksums will
        result in negative integers on 32bit platforms. On 64bit installations
        all <strong>crc32()</strong> results will be positive integers though.
      </p>
      <p>
        So you need to use the "%u" formatter of <a href="function.sprintf.php">sprintf()</a>
        or <a href="function.printf.php">printf()</a> to get the string representation of the 
        unsigned <strong>crc32()</strong> checksum in decimal format.
      </p>
      <p>
        For a hexadecimal representation of the checksum you can either use the "%x" formatter
        of <a href="function.sprintf.php">sprintf()</a> or <a href="function.printf.php">printf()</a> 
        or the <a href="function.dechex.php">dechex()</a> conversion functions, both of these also
        take care of converting the <strong>crc32()</strong> result to an unsigned integer.
      </p>
      <p>
        Having 64bit installations also return negative integers for higher result values was
        considered but would break the hexadecimal conversion as negatives would get an extra
        0xFFFFFFFF######## offset then. As hexadecimal representation seems to be the most common
        use case we decided to not break this even if it breaks direct decimal comparisons
        in about 50% of the cases when moving from 32 to 64bits.
      </p>
      <p>
        In retrospect having the function return an integer maybe wasn't the best idea and returning
        a hex string representation right away (as e.g. <a href="function.md5.php">md5()</a> does)
        might have been a better plan to begin with.
      </p>
      <p>
        For a more portable solution you may also consider the generic 
        <a href="function.hash.php">hash()</a>. <code>hash("crc32b", $str)</code> will return
        the same string as <code>str_pad(dechex(crc32($str)), 8, '0', STR_PAD_LEFT)</code>.
      </p>
    </div>
  </div>

  <div>
    <h3>Parameters</h3>
    <dl>
      <dt>str</dt>
      <dd>The data.</dd>
    </dl>
  </div>

  <div>
    <h3>Return Values</h3>
    <p>Returns the crc32 checksum of <code>str</code> as an integer.</p>
  </div>

  <div class="examples">
    <p><strong>Example #1 Displaying a crc32 checksum</strong></p>
    <div>
      This example shows how to print a converted checksum with the
      <a href="function.printf.php">printf()</a> function:
    </div>
    <pre class="php-code">
      <?php
      $checksum = crc32("The quick brown fox jumped over the lazy dog.");
      printf("%u\n", $checksum);
      ?>
    </pre>
  </div>
</div>
</body>
