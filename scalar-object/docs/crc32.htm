<h1>crc32</h1>

 <div>
  <p>
   Generates the cyclic redundancy checksum polynomial of 32-bit
   lengths of the <code>str</code>. This is usually used
   to validate the integrity of data being transmitted.
  </p>
  <div class="warning"><strong>Warning</strong>
   <p>
    Because PHP&#039;s integer type is signed many crc32 checksums will
    result in negative integers on 32bit platforms. On 64bit installations
    all <span><strong>crc32()</strong></span> results will be positive integers though.
   </p>
   <p>
    So you need to use the &quot;%u&quot; formatter of <span><a href="function.sprintf.php">sprintf()</a></span> or 
    <span><a href="function.printf.php">printf()</a></span> to get the string representation of the 
    unsigned <span><strong>crc32()</strong></span> checksum in decimal format.
   </p>
   <p>
    For a hexadecimal representation of the checksum you can either use the 
    &quot;%x&quot; formatter of <span><a href="function.sprintf.php">sprintf()</a></span> or <span><a href="function.printf.php">printf()</a></span> 
    or the <span><a href="function.dechex.php">dechex()</a></span> conversion functions, both of these
    also take care of converting the <span><strong>crc32()</strong></span> result to
    an unsigned integer.
   </p>
   <p>
    Having 64bit installations also return negative integers for higher
    result values was considered but would break the hexadecimal conversion
    as negatives would get an extra 0xFFFFFFFF######## offset then. As 
    hexadecimal representation seems to be the most common use case we
    decided to not break this even if it breaks direct decimal comparisons
    in about 50% of the cases when moving from 32 to 64bits.
   </p>
   <p>
    In retrospect having the function return an integer maybe wasn&#039;t the 
    best idea and returning a hex string representation right away (as 
    e.g. <span><a href="function.md5.php">md5()</a></span> does) might have been a better plan to
    begin with.
   </p>
   <p>
    For a more portable solution you may also consider the generic 
    <span><a href="function.hash.php">hash()</a></span>. <code>hash(&quot;crc32b&quot;, $str)</code> will 
    return the same string as <code>str_pad(dechex(crc32($str)), 8, &#039;0&#039;, STR_PAD_LEFT)</code>.
   </p>
  </div>
 </div>

 <div>
  <h3>Parameters</h3>
  <p>
   <dl>
     <dt><code>str</code></dt>
     <dd><p>The data.</p></dd>
   </dl>
  </p>
 </div>

 <div>
  <h3>Return Values</h3>
  <p>
   Returns the crc32 checksum of <code>str</code> as an integer.
  </p>
 </div>

 <div class="examples">
  <p>
   <div>
    <p><strong>Example #1 Displaying a crc32 checksum</strong></p>
    <div><p>
     This example shows how to print a converted checksum with the
     <span><a href="function.printf.php">printf()</a></span> function:
    </p></div>
    <div>
     <pre><span style="color: #000000"><span style="color: #0000BB">&lt;?php<br />$checksum&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">crc32</span><span style="color: #007700">(</span><span style="color: #DD0000">"The&nbsp;quick&nbsp;brown&nbsp;fox&nbsp;jumped&nbsp;over&nbsp;the&nbsp;lazy&nbsp;dog."</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">printf</span><span style="color: #007700">(</span><span style="color: #DD0000">"%u\n"</span><span style="color: #007700">,&nbsp;</span><span style="color: #0000BB">$checksum</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">?&gt;</span></span></pre>
    </div>

   </div>
  </p>
 </div>
